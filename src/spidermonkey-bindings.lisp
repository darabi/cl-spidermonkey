;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :spidermonkey-bindings
  (:use :cffi)
  (:nicknames :sm-bindings :smlib)
  (:export "JS-PROPERTY-SPEC-NEW"
           "JS-PROPERTY-SPEC-CONSTRUCTOR"
           "JS-PROPERTY-SPEC-OPERATOR-="
           "JS-TRACER-NEW"
           "JS-TRACER-CONSTRUCTOR"
           "JS-TRACER-OPERATOR-="
           "JS-CONST-DOUBLE-SPEC-NEW"
           "JS-CONST-DOUBLE-SPEC-CONSTRUCTOR"
           "JS-CONST-DOUBLE-SPEC-OPERATOR-="
           "JSXML-OBJECT-OPS-NEW"
           "JSXML-OBJECT-OPS-CONSTRUCTOR"
           "JSXML-OBJECT-OPS-OPERATOR-="
           "JS-ID-ARRAY-NEW"
           "JS-ID-ARRAY-CONSTRUCTOR"
           "JS-ID-ARRAY-OPERATOR-="
           "JS-OBJECT-OPS-NEW"
           "JS-OBJECT-OPS-CONSTRUCTOR"
           "JS-OBJECT-OPS-OPERATOR-="
           "JS-ERROR-REPORT-NEW"
           "JS-ERROR-REPORT-CONSTRUCTOR"
           "JS-ERROR-REPORT-OPERATOR-="
           "JS-FUNCTION-SPEC-NEW"
           "JS-FUNCTION-SPEC-CONSTRUCTOR"
           "JS-FUNCTION-SPEC-OPERATOR-="
           "JS-PRINCIPALS-NEW"
           "JS-PRINCIPALS-CONSTRUCTOR"
           "JS-PRINCIPALS-OPERATOR-="
           "JS-PROPERTY-NEW"
           "JS-PROPERTY-CONSTRUCTOR"
           "JS-PROPERTY-OPERATOR-="
           "JS-EXTENDED-CLASS-NEW"
           "JS-EXTENDED-CLASS-CONSTRUCTOR"
           "JS-EXTENDED-CLASS-OPERATOR-="
           "JS-LOCALE-CALLBACKS-NEW"
           "JS-LOCALE-CALLBACKS-CONSTRUCTOR"
           "JS-LOCALE-CALLBACKS-OPERATOR-="
           "FORGET"
           "JS-AUTO-LOCAL-ROOT-SCOPE-NEW"
           "JS-AUTO-LOCAL-ROOT-SCOPE-CONSTRUCTOR"
           "JS-AUTO-LOCAL-ROOT-SCOPE-OPERATOR-="
           "JS-CLASS-NEW"
           "JS-CLASS-CONSTRUCTOR"
           "JS-CLASS-OPERATOR-="
           "RESUME"
           "SUSPEND"
           "JS-AUTO-REQUEST-NEW"
           "JS-AUTO-REQUEST-CONSTRUCTOR"
           "JS-AUTO-REQUEST-OPERATOR-="
           "JS-GET-PROPERTY-ATTRS-GETTER-AND-SETTER"
           "JS-SET-PRINCIPALS-TRANSCODER"
           "JS-PRINCIPALS-TRANSCODER"
           "JS-NEW-SCRIPT-OBJECT"
           "JS-REMOVE-EXTERNAL-STRING-FINALIZER"
           "JS-DEFINE-PROPERTY-WITH-TINY-ID"
           "JS-YIELD-REQUEST"
           "JS-REPORT-ALLOCATION-OVERFLOW"
           "JS-THROW-REPORTED-ERROR"
           "JS-GET-CLASS-OBJECT"
           "JS-PROTO-LIMIT"
           "JS-PROTO-NO-SUCH-METHOD"
           "JS-PROTO-XML-FILTER"
           "JS-PROTO-BLOCK"
           "JS-PROTO-FILE"
           "JS-PROTO-UNUSED-PROTO-28"
           "JS-PROTO-STOP-ITERATION"
           "JS-PROTO-ITERATOR"
           "JS-PROTO-GENERATOR"
           "JS-PROTO-URI-ERROR"
           "JS-PROTO-TYPE-ERROR"
           "JS-PROTO-SYNTAX-ERROR"
           "JS-PROTO-REFERENCE-ERROR"
           "JS-PROTO-RANGE-ERROR"
           "JS-PROTO-EVAL-ERROR"
           "JS-PROTO-INTERNAL-ERROR"
           "JS-PROTO-ERROR"
           "JS-PROTO-ATTRIBUTE-NAME"
           "JS-PROTO-ANY-NAME"
           "JS-PROTO-Q-NAME"
           "JS-PROTO-NAMESPACE"
           "JS-PROTO-XML"
           "JS-PROTO-SCRIPT"
           "JS-PROTO-REG-EXP"
           "JS-PROTO-STRING"
           "JS-PROTO-NUMBER"
           "JS-PROTO-MATH"
           "JS-PROTO-DATE"
           "JS-PROTO-CALL"
           "JS-PROTO-BOOLEAN"
           "JS-PROTO-ARRAY"
           "JS-PROTO-FUNCTION"
           "JS-PROTO-OBJECT"
           "JS-PROTO-NULL"
           "JS-PROTO-KEY"
           "JS-MARK-GC-THING"
           "JS-SET-ERROR-REPORTER"
           "JS-ERROR-REPORTER"
           "JS-DESTROY-SCRIPT"
           "JS-REPORT-PENDING-EXCEPTION"
           "JS-END-REQUEST"
           "JS-GET-OPERATION-LIMIT"
           "JS-DESTROY-CONTEXT-MAYBE-GC"
           "JS-COMPILE-FUNCTION-FOR-PRINCIPALS"
           "JS-CONTEXT-ITERATOR"
           "JS-GET-UC-PROPERTY"
           "JS-LOCK-GC-THING-RT"
           "JS-NEW-DOUBLE-VALUE"
           "JS-GET-CLASS"
           "JS-VALUE-TO-NUMBER"
           "JS-GET-CONTEXT-PRIVATE"
           "JS-ADD-ROOT"
           "JS-COMPILE-UC-SCRIPT"
           "JS-GET-NA-N-VALUE"
           "JS-DEFINE-FUNCTIONS"
           "JS-COMPILE-FILE-HANDLE-FOR-PRINCIPALS"
           "JS-NEW-OBJECT-WITH-GIVEN-PROTO"
           "JS-ALREADY-HAS-OWN-UC-PROPERTY"
           "JS-SET-PROPERTY"
           "JS-REMOVE-ROOT-RT"
           "JS-CONVERT-VALUE"
           "JS-NEW-ARRAY-OBJECT"
           "JS-VALUE-TO-STRING"
           "JS-REPORT-ERROR-FLAGS-AND-NUMBER-UC"
           "JS-DEFINE-ELEMENT"
           "JS-GET-TYPE-NAME"
           "JS-GET-OPTIONS"
           "JS-GET-RUNTIME-PRIVATE"
           "JS-GET-METHOD-BY-ID"
           "JS-NEW-OBJECT"
           "JS-DESTROY-CONTEXT-NO-GC"
           "JS-SET-OPERATION-CALLBACK"
           "JS-COMPILE-SCRIPT-FOR-PRINCIPALS"
           "JS-VERSION-TO-STRING"
           "JS-VALUE-TO-ECMA-UINT-32"
           "JS-VALUE-TO-CONSTRUCTOR"
           "JS-DECOMPILE-FUNCTION-BODY"
           "JS-REPORT-ERROR-NUMBER"
           "JS-FINISH"
           "JS-ALREADY-HAS-OWN-ELEMENT"
           "JS-GET-NEGATIVE-INFINITY-VALUE"
           "JS-COMPILE-UC-FUNCTION-FOR-PRINCIPALS"
           "JS-HAS-ELEMENT"
           "JS-VALUE-TO-ID"
           "JS-INTERN-UC-STRING"
           "JS-REMOVE-ROOT"
           "JS-SAVE-FRAME-CHAIN"
           "JS-MAYBE-GC"
           "JS-REPORT-ERROR"
           "JS-COMPILE-SCRIPT"
           "JS-HAS-PROPERTY"
           "JS-GET-EMPTY-STRING-VALUE"
           "JS-UNLOCK"
           "JS-REPORT-OUT-OF-MEMORY"
           "CONCATENATE"
           "ENUMERATE-VALUES"
           "SET-METHOD"
           "GET-METHOD"
           "JSXML-OBJECT-OPS"
           "JS-CONCATENATE-OP"
           "JS-ENUMERATE-VALUES-OP"
           "JS-SET-METHOD-OP"
           "JS-GET-METHOD-OP"
           "JS-GET-RESERVED-SLOT"
           "JS-DEFINE-OBJECT"
           "JS-NEW-UC-STRING"
           "JS-CONSTRUCT-OBJECT-WITH-ARGUMENTS"
           "JS-GET-EXTERNAL-STRING-GC-TYPE"
           "JS-CONSTRUCT-OBJECT"
           "JS-TRACE-CHILDREN"
           "JS-RESUME-REQUEST"
           "JS-THROW-STOP-ITERATION"
           "JS-CLEAR-NEWBORN-ROOTS"
           "JS-GET-PROTOTYPE"
           "JS-PUSH-ARGUMENTS"
           "JS-SET-BRANCH-CALLBACK"
           "JS-BRANCH-CALLBACK"
           "JS-REALLOC"
           "JS-DESTROY-CONTEXT"
           "JS-GET-VERSION"
           "JS-GET-POSITIVE-INFINITY-VALUE"
           "JS-GET-FUNCTION-ID"
           "JS-EVALUATE-SCRIPT"
           "JS-SET-ARRAY-LENGTH"
           "JS-REPORT-ERROR-FLAGS-AND-NUMBER"
           "JS-SET-PENDING-EXCEPTION"
           "JS-BUFFER-IS-COMPILABLE-UNIT"
           "JS-SET-ELEMENT"
           "JS-GET-PARENT"
           "JS-CLEAR-SCOPE"
           "JS-INTERN-STRING"
           "SET-REQUIRED-SLOT"
           "GET-REQUIRED-SLOT"
           "CLEAR"
           "JS-TRACE"
           "SET-PARENT"
           "SET-PROTO"
           "DROP-PROPERTY"
           "THIS-OBJECT"
           "DEFAULT-VALUE"
           "DELETE-PROPERTY"
           "SET-ATTRIBUTES"
           "GET-ATTRIBUTES"
           "DEFINE-PROPERTY"
           "LOOKUP-PROPERTY"
           "DESTROY-OBJECT-MAP"
           "NEW-OBJECT-MAP"
           "JS-OBJECT-OPS"
           "JS-SET-REQUIRED-SLOT-OP"
           "JS-GET-REQUIRED-SLOT-OP"
           "JS-TRACE-OP"
           "JS-SET-OBJECT-SLOT-OP"
           "JS-PROPERTY-REF-OP"
           "JS-CHECK-ACCESS-ID-OP"
           "JS-NEW-ENUMERATE-OP"
           "JS-ATTRIBUTES-OP"
           "JS-PROPERTY-ID-OP"
           "JS-DEFINE-PROP-OP"
           "JS-LOOKUP-PROP-OP"
           "JS-OBJECT-MAP-OP"
           "JS-NEW-OBJECT-MAP-OP"
           "JS-STRING-TO-VERSION"
           "JS-LEAVE-LOCAL-ROOT-SCOPE-WITH-RESULT"
           "JS-SET-GLOBAL-OBJECT"
           "JS-IS-EXCEPTION-PENDING"
           "JS-SET-VERSION"
           "JSVERSION-LATEST"
           "JSVERSION-UNKNOWN"
           "JSVERSION-DEFAULT"
           "JSVERSION-1-8"
           "JSVERSION-1-7"
           "JSVERSION-1-6"
           "JSVERSION-1-5"
           "JSVERSION-ECMA-3"
           "JSVERSION-1-4"
           "JSVERSION-1-3"
           "JSVERSION-1-2"
           "JSVERSION-1-1"
           "JSVERSION-1-0"
           "JS-VERSION"
           "JS-CLEAR-PENDING-EXCEPTION"
           "JS-RESTORE-EXCEPTION-STATE"
           "JS-ERROR-FROM-EXCEPTION"
           "JS-NEW-DEPENDENT-STRING"
           "JS-DELETE-PROPERTY-2"
           "JS-NEW-UC-REG-EXP-OBJECT"
           "JS-DESTROY-ID-ARRAY"
           "JS-GET-METHOD"
           "JS-RESOLVE-STANDARD-CLASS"
           "JS-GET-PROPERTY-ATTRIBUTES"
           "JS-FREE"
           "JS-ALIAS-ELEMENT"
           "JS-CALL-FUNCTION"
           "JS-CALL-FUNCTION-VALUE"
           "MESSAGE-ARGS"
           "UCMESSAGE"
           "ERROR-NUMBER"
           "UCTOKENPTR"
           "UCLINEBUF"
           "TOKENPTR"
           "LINEBUF"
           "LINENO"
           "FILENAME"
           "JS-ERROR-REPORT"
           "JS-EXECUTE-SCRIPT"
           "JS-SET-PARENT"
           "JS-OBJECT-IS-FUNCTION"
           "JS-LOOKUP-PROPERTY"
           "JS-SET-PROTOTYPE"
           "JS-HAS-INSTANCE"
           "JS-CLEAR-CONTEXT-THREAD"
           "JS-COMPARE-STRINGS"
           "JS-NEW-GROWABLE-STRING"
           "JS-INIT-CLASS"
           "JS-COMPILE-UC-SCRIPT-FOR-PRINCIPALS"
           "JS-GET-PRIVATE"
           "JS-COMPUTE-THIS"
           "JS-INSTANCE-OF"
           "JS-SET-OPERATION-LIMIT"
           "JS-GET-OBJECT-ID"
           "JS-DEFINE-FUNCTION"
           "JS-TOGGLE-OPTIONS"
           "JS-ENTER-LOCAL-ROOT-SCOPE"
           "JS-SET-RUNTIME-PRIVATE"
           "JS-SET-CALL-RETURN-VALUE-2"
           "JS-NEW-FUNCTION"
           "JS-LOOKUP-UC-PROPERTY"
           "JS-REPORT-ERROR-NUMBER-UC"
           "JS-GET-RUNTIME"
           "EXTRA"
           "NARGS"
           "JS-FUNCTION-SPEC"
           "JS-SET-CONTEXT-PRIVATE"
           "JS-SET-GC-PARAMETER"
           "JSGC-STACKPOOL-LIFESPAN"
           "JSGC-MAX-MALLOC-BYTES"
           "JSGC-MAX-BYTES"
           "JSGC-PARAM-KEY"
           "JS-CALL-TRACER"
           "JS-IS-CONSTRUCTING"
           "JS-SET-PRIVATE"
           "JS-DEFINE-CONST-DOUBLES"
           "SPARE"
           "DVAL"
           "JS-CONST-DOUBLE-SPEC"
           "JS-SAVE-EXCEPTION-STATE"
           "JS-LOCK"
           "JS-PROPERTY-STUB"
           "JS-NEW-PROPERTY-ITERATOR"
           "ID"
           "JS-PROPERTY"
           "JS-CLEAR-REG-EXP-ROOTS"
           "JS-COMPILE-FUNCTION"
           "JS-DEFINE-UC-PROPERTY-WITH-TINY-ID"
           "JS-ENUMERATE"
           "JS-EXECUTE-SCRIPT-PART"
           "JS-IS-ARRAY-OBJECT"
           "JS-DELETE-PROPERTY"
           "JS-NEW-REG-EXP-OBJECT"
           "RESERVED-2"
           "RESERVED-1"
           "RESERVED-0"
           "WRAPPED-OBJECT"
           "ITERATOR-OBJECT"
           "INNER-OBJECT"
           "OUTER-OBJECT"
           "EQUALITY"
           "BASE"
           "JS-EXTENDED-CLASS"
           "JS-ITERATOR-OP"
           "JS-OBJECT-OP"
           "JS-EQUALITY-OP"
           "JS-GET-SCRIPT-OBJECT"
           "JS-UNDEPEND-STRING"
           "JS-COMPILE-FILE"
           "JS-STRDUP"
           "JS-GET-GLOBAL-FOR-OBJECT"
           "JS-RESOLVE-STUB"
           "JS-GET-OPERATION-CALLBACK"
           "JS-OPERATION-CALLBACK"
           "JS-DELETE-ELEMENT"
           "JS-ENCODE-STRING"
           "JS-SET-GC-CALLBACK-RT"
           "JS-FORGET-LOCAL-ROOT"
           "JS-NEW-DOUBLE"
           "JS-NOW"
           "INT-64"
           "JS-INT-64"
           "JS-ENCODE-CHARACTERS"
           "JS-TYPE-OF-VALUE"
           "JS-CALL-FUNCTION-NAME"
           "JS-GET-CONSTRUCTOR"
           "JS-SEAL-OBJECT"
           "JS-UNLOCK-GC-THING-RT"
           "JS-SET-UC-PROPERTY"
           "JS-DECODE-BYTES"
           "JS-SET-RESERVED-SLOT"
           "JS-ADD-NAMED-ROOT"
           "JS-EVALUATE-UC-SCRIPT"
           "JS-NEW-EXTERNAL-STRING"
           "JS-SET-EXTRA-GC-ROOTS"
           "JS-TRACE-DATA-OP"
           "JS-ADD-EXTERNAL-STRING-FINALIZER"
           "JS-STRING-FINALIZE-OP"
           "INT-N"
           "JS-ID-TO-VALUE"
           "JS-HAS-UC-PROPERTY"
           "JS-NEW-STRING"
           "JS-GET-CONTEXT-THREAD"
           "JS-DEFINE-UC-FUNCTION"
           "JS-GET-STRING-BYTES"
           "JS-GET-PENDING-EXCEPTION"
           "JS-SET-OBJECT-PRINCIPALS-FINDER"
           "JS-OBJECT-PRINCIPALS-FINDER"
           "JS-BEGIN-REQUEST"
           "JS-CLONE-FUNCTION-OBJECT"
           "JS-CONVERT-STUB"
           "JSTYPE-LIMIT"
           "JSTYPE-XML"
           "JSTYPE-NULL"
           "JSTYPE-BOOLEAN"
           "JSTYPE-NUMBER"
           "JSTYPE-STRING"
           "JSTYPE-FUNCTION"
           "JSTYPE-OBJECT"
           "JSTYPE-VOID"
           "JS-TYPE"
           "JS-ENUMERATE-STANDARD-CLASSES"
           "JS-EVALUATE-SCRIPT-FOR-PRINCIPALS"
           "JS-GET-FUNCTION-NAME"
           "JS-DEFINE-UC-PROPERTY"
           "JS-VALUE-TO-ECMA-INT-32"
           "JS-GET-LOCALE-CALLBACKS"
           "JS-GET-FUNCTION-FLAGS"
           "JS-SHUT-DOWN"
           "JS-CONCAT-STRINGS"
           "JS-DELETE-ELEMENT-2"
           "JS-REPORT-WARNING"
           "JS-GET-STRING-CHARS"
           "JS-MALLOC"
           "JS-GET-IMPLEMENTATION-VERSION"
           "JS-IS-ABOUT-TO-BE-FINALIZED"
           "JS-GET-FUNCTION-OBJECT"
           "JS-IS-GC-MARKING-TRACER"
           "JS-GET-ELEMENT"
           "JS-SET-THREAD-STACK-LIMIT"
           "JSUWORD"
           "JS-UWORD"
           "JS-SET-SCRIPT-STACK-QUOTA"
           "JS-AUTO-LOCAL-ROOT-SCOPE"
           "JS-DROP-EXCEPTION-STATE"
           "JS-EXCEPTION-STATE"
           "JS-ENUMERATE-RESOLVED-STANDARD-CLASSES"
           "VECTOR"
           "LENGTH"
           "JS-ID-ARRAY"
           "JS-EVALUATE-UC-SCRIPT-FOR-PRINCIPALS"
           "SUBSUME"
           "DESTROY"
           "REFCOUNT"
           "GLOBAL-PRIVILEGES-ENABLED"
           "GET-PRINCIPAL-ARRAY"
           "CODEBASE"
           "JS-PRINCIPALS"
           "JS-GET-PROPERTY"
           "JS-IS-RUNNING"
           "JS-VALUE-TO-BOOLEAN"
           "JS-VALUE-TO-INT-32"
           "JS-NEW-STRING-COPY-Z"
           "JS-NEW-STRING-COPY-N"
           "JS-GET-INSTANCE-PRIVATE"
           "JS-CLEAR-REG-EXP-STATICS"
           "JS-SET-REG-EXP-INPUT"
           "JS-SET-OPTIONS"
           "RESERVE-SLOTS"
           "MARK"
           "HAS-INSTANCE"
           "XDR-OBJECT"
           "CONSTRUCT"
           "CALL"
           "CHECK-ACCESS"
           "GET-OBJECT-OPS"
           "FINALIZE"
           "CONVERT"
           "RESOLVE"
           "ENUMERATE"
           "SET-PROPERTY"
           "GET-PROPERTY"
           "DEL-PROPERTY"
           "ADD-PROPERTY"
           "JS-CLASS"
           "JS-RESERVE-SLOTS-OP"
           "JS-MARK-OP"
           "JS-HAS-INSTANCE-OP"
           "JSXDR-OBJECT-OP"
           "JS-NATIVE"
           "JS-GET-OBJECT-OPS"
           "JS-FINALIZE-OP"
           "JS-CONVERT-OP"
           "JS-RESOLVE-OP"
           "JS-ENUMERATE-OP"
           "JS-POP-ARGUMENTS"
           "JS-TRACE-RUNTIME"
           "CALLBACK"
           "CONTEXT"
           "JS-TRACER"
           "JS-TRACE-CALLBACK"
           "JS-NEW-NUMBER-VALUE"
           "JSDOUBLE"
           "FLOAT-64"
           "JS-FLOAT-64"
           "JS-GET-STRING-LENGTH"
           "JS-SET-UC-PROPERTY-ATTRIBUTES"
           "JS-INTERN-UC-STRING-N"
           "JS-IS-ASSIGNING"
           "JS-LOCK-GC-THING"
           "JS-MAP-GC-ROOTS"
           "JSGC-ROOT-MAP-FUN"
           "JS-SET-LOCALE-CALLBACKS"
           "LOCALE-GET-ERROR-MESSAGE"
           "LOCALE-TO-UNICODE"
           "LOCALE-COMPARE"
           "LOCALE-TO-LOWER-CASE"
           "LOCALE-TO-UPPER-CASE"
           "JS-LOCALE-CALLBACKS"
           "JS-ERROR-CALLBACK"
           "JS-LOCALE-TO-UNICODE"
           "JS-LOCALE-COMPARE"
           "JS-LOCALE-TO-LOWER-CASE"
           "JS-LOCALE-TO-UPPER-CASE"
           "JS-SUSPEND-REQUEST"
           "JS-SET-CONTEXT-THREAD"
           "JS-VALUE-TO-OBJECT"
           "JS-SET-GC-CALLBACK"
           "JSGC-CALLBACK"
           "JS-DEFINE-PROPERTY"
           "JS-GET-UC-PROPERTY-ATTRS-GETTER-AND-SETTER"
           "JS-NEW-UC-STRING-COPY-Z"
           "JS-NEW-UC-STRING-COPY-N"
           "JS-CONVERT-ARGUMENTS"
           "JS-INIT-STANDARD-CLASSES"
           "JS-LOOKUP-ELEMENT"
           "JSINT"
           "JS-LOOKUP-PROPERTY-WITH-FLAGS"
           "JS-SET-C-STRINGS-ARE-UTF-8"
           "JS-C-STRINGS-ARE-UTF-8"
           "JS-STATIC-ASSERT"
           "JS-ALIAS-PROPERTY"
           "M-SAVE-DEPTH"
           "M-CONTEXT"
           "JS-AUTO-REQUEST"
           "JSREFCOUNT"
           "INT-32"
           "JS-INT-32"
           "JS-COMPILE-UC-FUNCTION"
           "JS-GET-ARRAY-LENGTH"
           "JS-CLEAR-OPERATION-CALLBACK"
           "JS-DECOMPILE-FUNCTION"
           "JS-LEAVE-LOCAL-ROOT-SCOPE"
           "JS-VALUE-TO-FUNCTION"
           "JS-SET-PROPERTY-ATTRIBUTES"
           "JS-CHECK-ACCESS"
           "JSACC-LIMIT"
           "JSACC-WRITE"
           "JSACC-READ"
           "JSACC-WATCH"
           "JSACC-IMPORT"
           "JSACC-PARENT"
           "JSACC-PROTO"
           "JS-ACCESS-MODE"
           "JS-FINALIZE-STUB"
           "JS-NEXT-PROPERTY"
           "JSID"
           "JS-RESTORE-FRAME-CHAIN"
           "JS-STACK-FRAME"
           "JS-VALUE-TO-UINT-16"
           "JSEXEC-MAIN"
           "JSEXEC-PROLOG"
           "JS-EXEC-PART"
           "JS-ADD-NAMED-ROOT-RT"
           "JS-GET-SCOPE-CHAIN"
           "JS-GET-UC-PROPERTY-ATTRIBUTES"
           "JS-DECOMPILE-SCRIPT"
           "UINT-N"
           "JS-UINTN"
           "JS-INIT"
           "JS-UNLOCK-GC-THING"
           "JS-COMPILE-FILE-HANDLE"
           "FILE"
           "JS-SCRIPT"
           "JS-DELETE-UC-PROPERTY-2"
           "JSVAL"
           "JSWORD"
           "JS-WORD"
           "JSCHAR"
           "JS-NEW-CONTEXT"
           "SIZE-T"
           "JS-GET-FUNCTION-ARITY"
           "JS-FUNCTION"
           "UINT-16"
           "JS-UINT-16"
           "JS-ALREADY-HAS-OWN-PROPERTY"
           "JS-GC"
           "JS-DEFINE-PROPERTIES"
           "SETTER"
           "GETTER"
           "FLAGS"
           "TINYID"
           "NAME"
           "JS-PROPERTY-SPEC"
           "JS-PROPERTY-OP"
           "UINT-8"
           "JS-UINT-8"
           "INT-8"
           "JS-INT-8"
           "JS-SET-CHECK-OBJECT-ACCESS-CALLBACK"
           "JS-CHECK-ACCESS-OP"
           "JS-GET-GLOBAL-OBJECT"
           "JS-HAS-ARRAY-LENGTH"
           "JSUINT"
           "UINT-32"
           "JS-UINT-32"
           "JS-ENUMERATE-STUB"
           "JS-OBJECT"
           "JS-SET-CONTEXT-CALLBACK"
           "JS-RUNTIME"
           "JS-CONTEXT-CALLBACK"
           "JS-MAKE-STRING-IMMUTABLE"
           "JS-STRING"
           "JS-CONTEXT"
           "JS-BOOL"
           "JS-INTN"
           ;;;; Custom exports
           "+JSOPTION-STRICT+"
           "+JSOPTION-VAR-OBJ-FIX+"
           "+JSCLASS-GLOBAL-FLAGS+"
           "+JSCLASS-HAS-PRIVATE+"
           

           ;; JSVAL specific types
           "+JSVAL-BOOLEAN+"
           "+JSVAL-DOUBLE+"
           "+JSVAL-INT+"
           "+JSVAL-OBJECT+"
           "+JSVAL-STRING+"

           ;; JSVAL constant values
           "+JSVAL-NULL+"
           "+JSVAL-VOID+"
           "+JSVAL-ZERO+"
           "+JSVAL-TRUE+"
           "+JSVAL-FALSE+"

           "+JSVAL-INT-MAX+"
           "+JSVAL-INT-MIN+"
           "+JSVAL-INT-BITS+"

           "+JSVAL-TAGBITS+"
           "+JSVAL-TAGMASK+"

           ;; JSVAL predicates
           "JSVAL-BOOLEANP"
           "JSVAL-DOUBLEP"
           "JSVAL-INTP"
           "JSVAL-NULLP"
           "JSVAL-STRINGP"
           "JSVAL-OBJECTP"
           "JSVAL-VOIDP"

           ;; JSVAL more advanced
           "JSVAL-FOR-INT"
           "JSVAL-TAG"
           "JSVAL-TO-INT"

           "JSVAL-TO-BOOLEAN"
           "JSVAL-FOR-BOOLEAN"

           "JSVAL-TO-POINTER"
           
           ))

#+nil
(let ((syms nil)) (do-symbols (x :smlib) (push x syms))
                   (setf syms (mapcar #'string syms))
                   (setf syms (sort syms #'string-lessp))
                   (setf syms (remove-if #'(lambda (x)
                                             (not (eql (length "+JSVAL")
                                                       (mismatch "+JSVAL" x))))
                                         syms))
                   syms)

(cl:in-package :spidermonkey-bindings)

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:defun js-bit (n)
    (cl:ash 1 n))

  (cl:defun js-bitmask (n)
    (cl:- (js-bit n) 1)))

(cl:defconstant +jsoption-strict+ (js-bit 0))
(cl:defconstant +jsoption-werror+ (js-bit 1))
(cl:defconstant +jsoption-var-obj-fix+ (js-bit 2))
(cl:defconstant +jsoption-private-is-nsisupports+ (js-bit 3))
(cl:defconstant +jsoption-compile-n-go+ (js-bit 4))
(cl:defconstant +jsoption-atline+ (js-bit 5))
(cl:defconstant +jsoption-xml+ (js-bit 6))
(cl:defconstant +jsoption-native-branch-callback+ (js-bit 7))

(cl:defconstant +jsclass-has-private+ (js-bit 0))
(cl:defconstant +jsclass-has-enumerate+ (js-bit 1))
(cl:defconstant +jsclass-new-resolve+ (js-bit 2))
(cl:defconstant +jsclass-private-is-nsisupports+ (js-bit 3))
(cl:defconstant +jsclass-share-all-properties+ (js-bit 4))
(cl:defconstant +jsclass-new-resolve-get-start+ (js-bit 5))
(cl:defconstant +jsclass-construct-prototype+ (js-bit 6))
(cl:defconstant +jsclass-document-observer+ (js-bit 7))

(cl:defconstant +jsclass-reserved-slots-shift+ 8)
(cl:defconstant +jsclass-reserved-slots-width+ 8)
(cl:defconstant +jsclass-reserved-slots-mask+ (js-bitmask +jsclass-reserved-slots-width+))
(cl:defconstant +jsclass-high-flags-shift+ (cl:+ +jsclass-reserved-slots-shift+
                                                 +jsclass-reserved-slots-width+))

(cl:defconstant +jsclass-is-extended+   (js-bit (cl:+ 0 +jsclass-high-flags-shift+)))
(cl:defconstant +jsclass-is-anonymous+  (js-bit (cl:+ 1 +jsclass-high-flags-shift+)))
(cl:defconstant +jsclass-is-global+     (js-bit (cl:+ 2 +jsclass-high-flags-shift+)))
(cl:defconstant +jsclass-mark-is-trace+ (js-bit (cl:+ 3 +jsclass-high-flags-shift+)))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:defun jsclass-has-reserved-slots (n)
    (cl:ash (cl:logand n +jsclass-reserved-slots-mask+)
            +jsclass-reserved-slots-shift+)))

(cl:defconstant +jsclass-global-flags+ (cl:logior +jsclass-is-global+
                                                  (jsclass-has-reserved-slots
                                                   (cffi:foreign-enum-value 'smlib:js-proto-key :js-proto-limit))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; jsval business
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(cl:defconstant +jsval-object+ 0)
(cl:defconstant +jsval-int+ 1)
(cl:defconstant +jsval-double+ 2)
(cl:defconstant +jsval-string+ 4)
(cl:defconstant +jsval-boolean+ 6)


(cl:defconstant +jsval-null+ 0)


(cl:defconstant +jsval-tagbits+ 3)
(cl:defconstant +jsval-tagmask+ (js-bitmask +jsval-tagbits+))
(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:defun jsval-tag (jsval)
    (cl:logand jsval +jsval-tagmask+))

  ;; jsval integer stuff
  (cl:defconstant +jsval-int-bits+ 31)
  (cl:defconstant +jsval-int-min+ (cl:- 1 (cl:ash 1 30)))
  (cl:defconstant +jsval-int-max+ (cl:- (cl:ash 1 30) 1))

  (cl:defun int-fits-in-jsval? (int)
    (cl:declare (cl:type cl:integer int))
    (cl:<= +jsval-int-min+ int +jsval-int-max+))

  (cl:defun jsval-for-int (int)
    (cl:declare (cl:type cl:integer int))
    (cl:logior (cl:ash int 1) 1))


  (cl:defun jsval-intp (jsval)
    (cl:and (cl:not (cl:= 0 (cl:logand jsval +jsval-int+)))
            (cl:not (cl:= jsval +jsval-void+))))

  (cl:defun jsval-to-int (jsval)
    (cl:declare (cl:type (cl:satisfies jsval-intp) jsval))
    (cl:ash jsval -1))

  (cl:defconstant +jsval-void+ (jsval-for-int (cl:- 0 (cl:ash 1 30))))

  (cl:defun jsval-for-boolean (t-or-nil)
    (cl:let ((x (cl:if t-or-nil 1 0)))
      (cl:logior (cl:ash x +jsval-tagbits+)
                 +jsval-boolean+)))

  (cl:defun jsval-clear-tag (jsval)
    (cl:logand jsval (cl:lognot +jsval-tagmask+)))

  (cl:defun jsval-to-pointer (jsval)
    (cl:let ((address (jsval-clear-tag jsval)))
      ;; aligned every 2^3 bytes to make this magic happen
      (cffi:make-pointer address)))

  ;;; predicates for jsval types
  (cl:defun jsval-voidp (jsval)
    (cl:= jsval +jsval-void+))

  (cl:defun jsval-objectp (jsval)
    (cl:= +jsval-object+ (jsval-tag jsval)))

  (cl:defun jsval-doublep (jsval)
    (cl:= +jsval-double+ (jsval-tag jsval)))

  (cl:defun jsval-booleanp (jsval)
    (cl:= +jsval-boolean+ (jsval-tag jsval)))

  (cl:defun jsval-stringp (jsval)
    (cl:= +jsval-string+ (jsval-tag jsval)))

  (cl:defun jsval-nullp (jsval)
    (cl:= jsval +jsval-null+))



  (cl:defconstant smlib::+jsval-zero+ (jsval-for-int 0))
  (cl:defconstant smlib::+jsval-one+ (jsval-for-int 1))

  (cl:defconstant smlib::+jsval-false+ (jsval-for-boolean cl:nil))
  (cl:defconstant smlib::+jsval-true+ (jsval-for-boolean cl:t)))








(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) ,cl:nil
                                 ,@body))

(cffi::defctype js-intn :int)

(cffi::defctype js-bool js-intn)

(cffi:defcstruct js-context
  )

(cffi:defcstruct js-string
  )

(cffi:defcfun ("JS_MakeStringImmutable" js-make-string-immutable) js-bool
                                                                          (cx :pointer)
                                                                          (str :pointer))

(cffi::defctype js-context-callback :pointer)

(cffi:defcstruct js-runtime
  )

(cffi:defcfun ("JS_SetContextCallback" js-set-context-callback) js-context-callback
                                                                                    (rt :pointer)
                                                                                    (cx-callback js-context-callback))

(cffi:defcstruct js-object
  )

(cffi:defcfun ("JS_EnumerateStub" js-enumerate-stub) js-bool (cx :pointer)
                                                             (obj :pointer))

(cffi::defctype js-uint-32 :unsigned-int)

(cffi::defctype uint-32 js-uint-32)

(cffi::defctype jsuint uint-32)

(cffi:defcfun ("JS_HasArrayLength" js-has-array-length) js-bool (cx :pointer)
                                                                (obj :pointer)
                                                                (lengthp :pointer))

(cffi:defcfun ("JS_GetGlobalObject" js-get-global-object) :pointer (cx :pointer))

(cffi::defctype js-check-access-op :pointer)

(cffi:defcfun ("JS_SetCheckObjectAccessCallback" js-set-check-object-access-callback) js-check-access-op
                                                                                                         (rt :pointer)
                                                                                                         (acb js-check-access-op))

(cffi::defctype js-int-8 :char)

(cffi::defctype int-8 js-int-8)

(cffi::defctype js-uint-8 :unsigned-char)

(cffi::defctype uint-8 js-uint-8)

(cffi::defctype js-property-op :pointer)

(cffi:defcstruct js-property-spec
  (name :pointer)
  (tinyid int-8)
  (flags uint-8)
  (getter js-property-op)
  (setter js-property-op))

(cffi:defcfun ("JS_DefineProperties" js-define-properties) js-bool (cx :pointer)
                                                                   (obj :pointer)
                                                                   (ps :pointer))

(cffi:defcfun ("JS_GC" js-gc) :void (cx :pointer))

(cffi:defcfun ("JS_AlreadyHasOwnProperty" js-already-has-own-property) js-bool
                                                                               (cx :pointer)
                                                                               (obj :pointer)
                                                                               (name :pointer)
                                                                               (foundp :pointer))

(cffi::defctype js-uint-16 :unsigned-short)

(cffi::defctype uint-16 js-uint-16)

(cffi:defcstruct js-function
  )

(cffi:defcfun ("JS_GetFunctionArity" js-get-function-arity) uint-16
                                                                    (fun :pointer))

(cffi::defctype size-t :unsigned-long)

(cffi:defcfun ("JS_NewContext" js-new-context) :pointer (rt :pointer)
                                                        (stack-chunk-size size-t))

(cffi::defctype jschar uint-16)

(cffi::defctype js-word :long)

(cffi::defctype jsword js-word)

(cffi::defctype jsval jsword)

(cffi:defcfun ("JS_DeleteUCProperty2" js-delete-uc-property-2) js-bool
                                                                       (cx :pointer)
                                                                       (obj :pointer)
                                                                       (name :pointer)
                                                                       (namelen size-t)
                                                                       (rval :pointer))

(cffi:defcstruct js-script
  )

(cffi:defcstruct _io-marker
  (_next :pointer)
  (_sbuf :pointer)
  (_pos :int))

(cffi::defctype _-off-t :long)

(cffi::defctype _io-lock-t :void)

(cffi::defctype _-off-64-t :long)

(cffi:defcstruct _io-file
  (_flags :int)
  (_io-read-ptr (:pointer :char))
  (_io-read-end (:pointer :char))
  (_io-read-base (:pointer :char))
  (_io-write-base (:pointer :char))
  (_io-write-ptr (:pointer :char))
  (_io-write-end (:pointer :char))
  (_io-buf-base (:pointer :char))
  (_io-buf-end (:pointer :char))
  (_io-save-base (:pointer :char))
  (_io-backup-base (:pointer :char))
  (_io-save-end (:pointer :char))
  (_markers :pointer)
  (_chain :pointer)
  (_fileno :int)
  (_flags-2 :int)
  (_old-offset _-off-t)
  (_cur-column :unsigned-short)
  (_vtable-offset :char)
  (_shortbuf :char :count 1)
  (_lock :pointer)
  (_offset _-off-64-t)
  (_-pad-1 (:pointer :void))
  (_-pad-2 (:pointer :void))
  (_-pad-3 (:pointer :void))
  (_-pad-4 (:pointer :void))
  (_-pad-5 size-t)
  (_mode :int)
  (_unused-2 :char :count 20))

(cffi::defctype file _io-file)

(cffi:defcfun ("JS_CompileFileHandle" js-compile-file-handle) :pointer
                                                                       (cx :pointer)
                                                                       (obj :pointer)
                                                                       (filename :pointer)
                                                                       (fh :pointer))

(cffi:defcfun ("JS_UnlockGCThing" js-unlock-gc-thing) js-bool (cx :pointer)
                                                              (thing (:pointer :void)))

(cffi:defcfun ("JS_Init" js-init) :pointer (maxbytes uint-32))

(cffi::defctype js-uintn :unsigned-int)

(cffi::defctype uint-n js-uintn)

(cffi:defcfun ("JS_DecompileScript" js-decompile-script) :pointer (cx :pointer)
                                                                  (script :pointer)
                                                                  (name :pointer)
                                                                  (indent uint-n))

(cffi:defcfun ("JS_GetUCPropertyAttributes" js-get-uc-property-attributes) js-bool
                                                                                   (cx :pointer)
                                                                                   (obj :pointer)
                                                                                   (name :pointer)
                                                                                   (namelen size-t)
                                                                                   (attrsp :pointer)
                                                                                   (foundp :pointer))

(cffi:defcfun ("JS_GetScopeChain" js-get-scope-chain) :pointer (cx :pointer))

(cffi:defcfun ("JS_AddNamedRootRT" js-add-named-root-rt) js-bool (rt :pointer)
                                                                 (rp (:pointer :void))
                                                                 (name :pointer))

(cffi:defcenum js-exec-part
  (:jsexec-prolog 0)
  (:jsexec-main 1))

(cffi:defcfun ("JS_ValueToUint16" js-value-to-uint-16) js-bool (cx :pointer)
                                                               (v jsval)
                                                               (ip :pointer))

(cffi:defcstruct js-stack-frame
  )

(cffi:defcfun ("JS_RestoreFrameChain" js-restore-frame-chain) :void
                                                                    (cx :pointer)
                                                                    (fp :pointer))

(cffi::defctype jsid jsword)

(cffi:defcfun ("JS_NextProperty" js-next-property) js-bool (cx :pointer)
                                                           (iterobj :pointer)
                                                           (idp :pointer))

(cffi:defcfun ("JS_FinalizeStub" js-finalize-stub) :void (cx :pointer)
                                                         (obj :pointer))

(cffi:defcenum js-access-mode
  (:jsacc-proto 0)
  (:jsacc-parent 1)
  (:jsacc-import 2)
  (:jsacc-watch 3)
  (:jsacc-read 4)
  (:jsacc-write 8)
  (:jsacc-limit 9))

(cffi:defcfun ("JS_CheckAccess" js-check-access) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (id jsid)
                                                         (mode js-access-mode)
                                                         (vp :pointer)
                                                         (attrsp :pointer))

(cffi:defcfun ("JS_SetPropertyAttributes" js-set-property-attributes) js-bool
                                                                              (cx :pointer)
                                                                              (obj :pointer)
                                                                              (name :pointer)
                                                                              (attrs uint-n)
                                                                              (foundp :pointer))

(cffi:defcfun ("JS_ValueToFunction" js-value-to-function) :pointer (cx :pointer)
                                                                   (v jsval))

(cffi:defcfun ("JS_LeaveLocalRootScope" js-leave-local-root-scope) :void
                                                                         (cx :pointer))

(cffi:defcfun ("JS_DecompileFunction" js-decompile-function) :pointer
                                                                      (cx :pointer)
                                                                      (fun :pointer)
                                                                      (indent uint-n))

(cffi:defcfun ("JS_ClearOperationCallback" js-clear-operation-callback) :void
                                                                              (cx :pointer))

(cffi:defcfun ("JS_GetArrayLength" js-get-array-length) js-bool (cx :pointer)
                                                                (obj :pointer)
                                                                (lengthp :pointer))

(cffi:defcfun ("JS_CompileUCFunction" js-compile-uc-function) :pointer
                                                                       (cx :pointer)
                                                                       (obj :pointer)
                                                                       (name :pointer)
                                                                       (nargs uint-n)
                                                                       (argnames :pointer)
                                                                       (chars :pointer)
                                                                       (length size-t)
                                                                       (filename :pointer)
                                                                       (lineno uint-n))

(cffi::defctype js-int-32 :int)

(cffi::defctype int-32 js-int-32)

(cffi::defctype jsrefcount int-32)

(cffi:defcstruct js-auto-request
  (m-context :pointer)
  (m-save-depth jsrefcount))

(cffi:defcfun ("JS_AliasProperty" js-alias-property) js-bool (cx :pointer)
                                                             (obj :pointer)
                                                             (name :pointer)
                                                             (alias :pointer))

(cffi:defcfun ("js_static_assert" js-static-assert) :void (arg (:pointer :int)))

(cffi:defcfun ("JS_CStringsAreUTF8" js-c-strings-are-utf-8) js-bool)

(cffi:defcfun ("JS_SetCStringsAreUTF8" js-set-c-strings-are-utf-8) :void)

(cffi:defcfun ("JS_LookupPropertyWithFlags" js-lookup-property-with-flags) js-bool
                                                                                   (cx :pointer)
                                                                                   (obj :pointer)
                                                                                   (name :pointer)
                                                                                   (flags uint-n)
                                                                                   (vp :pointer))

(cffi::defctype jsint int-32)

(cffi:defcfun ("JS_LookupElement" js-lookup-element) js-bool (cx :pointer)
                                                             (obj :pointer)
                                                             (index jsint)
                                                             (vp :pointer))

(cffi:defcfun ("JS_InitStandardClasses" js-init-standard-classes) js-bool
                                                                          (cx :pointer)
                                                                          (obj :pointer))

(cffi:defcfun ("JS_ConvertArguments" js-convert-arguments) js-bool (cx :pointer)
                                                                   (argc uint-n)
                                                                   (argv :pointer)
                                                                   (format :pointer)common-lisp:&rest)

(cffi:defcfun ("JS_NewUCStringCopyN" js-new-uc-string-copy-n) :pointer
                                                                       (cx :pointer)
                                                                       (s :pointer)
                                                                       (n size-t))

(cffi:defcfun ("JS_NewUCStringCopyZ" js-new-uc-string-copy-z) :pointer
                                                                       (cx :pointer)
                                                                       (s :pointer))

(cffi:defcfun ("JS_GetUCPropertyAttrsGetterAndSetter" js-get-uc-property-attrs-getter-and-setter) js-bool
                                                                                                          (cx :pointer)
                                                                                                          (obj :pointer)
                                                                                                          (name :pointer)
                                                                                                          (namelen size-t)
                                                                                                          (attrsp :pointer)
                                                                                                          (foundp :pointer)
                                                                                                          (getterp :pointer)
                                                                                                          (setterp :pointer))

(cffi:defcfun ("JS_DefineProperty" js-define-property) js-bool (cx :pointer)
                                                               (obj :pointer)
                                                               (name :pointer)
                                                               (value jsval)
                                                               (getter js-property-op)
                                                               (setter js-property-op)
                                                               (attrs uint-n))

(cffi::defctype jsgc-callback :pointer)

(cffi:defcfun ("JS_SetGCCallback" js-set-gc-callback) jsgc-callback
                                                                    (cx :pointer)
                                                                    (cb jsgc-callback))

(cffi:defcfun ("JS_ValueToObject" js-value-to-object) js-bool (cx :pointer)
                                                              (v jsval)
                                                              (objp :pointer))

(cffi:defcfun ("JS_SetContextThread" js-set-context-thread) jsword (cx :pointer))

(cffi:defcfun ("JS_SuspendRequest" js-suspend-request) jsrefcount (cx :pointer))

(cffi::defctype js-locale-to-upper-case :pointer)

(cffi::defctype js-locale-to-lower-case :pointer)

(cffi::defctype js-locale-compare :pointer)

(cffi::defctype js-locale-to-unicode :pointer)

(cffi::defctype js-error-callback :pointer)

(cffi:defcstruct js-locale-callbacks
  (locale-to-upper-case js-locale-to-upper-case)
  (locale-to-lower-case js-locale-to-lower-case)
  (locale-compare js-locale-compare)
  (locale-to-unicode js-locale-to-unicode)
  (locale-get-error-message js-error-callback))

(cffi:defcfun ("JS_SetLocaleCallbacks" js-set-locale-callbacks) :void
                                                                      (cx :pointer)
                                                                      (callbacks :pointer))

(cffi::defctype jsgc-root-map-fun :pointer)

(cffi:defcfun ("JS_MapGCRoots" js-map-gc-roots) uint-32 (rt :pointer)
                                                        (map jsgc-root-map-fun)
                                                        (data (:pointer :void)))

(cffi:defcfun ("JS_LockGCThing" js-lock-gc-thing) js-bool (cx :pointer)
                                                          (thing (:pointer :void)))

(cffi:defcfun ("JS_IsAssigning" js-is-assigning) js-bool (cx :pointer))

(cffi:defcfun ("JS_InternUCStringN" js-intern-uc-string-n) :pointer
                                                                    (cx :pointer)
                                                                    (s :pointer)
                                                                    (length size-t))

(cffi:defcfun ("JS_SetUCPropertyAttributes" js-set-uc-property-attributes) js-bool
                                                                                   (cx :pointer)
                                                                                   (obj :pointer)
                                                                                   (name :pointer)
                                                                                   (namelen size-t)
                                                                                   (attrs uint-n)
                                                                                   (foundp :pointer))

(cffi:defcfun ("JS_GetStringLength" js-get-string-length) size-t (str :pointer))

(cffi::defctype js-float-64 :double)

(cffi::defctype float-64 js-float-64)

(cffi::defctype jsdouble float-64)

(cffi:defcfun ("JS_NewNumberValue" js-new-number-value) js-bool (cx :pointer)
                                                                (d jsdouble)
                                                                (rval :pointer))

(cffi::defctype js-trace-callback :pointer)

(cffi:defcstruct js-tracer
  (context :pointer)
  (callback js-trace-callback))

(cffi:defcfun ("JS_TraceRuntime" js-trace-runtime) :void (trc :pointer))

(cffi:defcfun ("JS_PopArguments" js-pop-arguments) :void (cx :pointer)
                                                         (mark (:pointer :void)))

(cffi::defctype js-enumerate-op :pointer)

(cffi::defctype js-resolve-op :pointer)

(cffi::defctype js-convert-op :pointer)

(cffi::defctype js-finalize-op :pointer)

(cffi::defctype js-get-object-ops :pointer)

(cffi::defctype js-native :pointer)

(cffi::defctype jsxdr-object-op :pointer)

(cffi::defctype js-has-instance-op :pointer)

(cffi::defctype js-mark-op :pointer)

(cffi::defctype js-reserve-slots-op :pointer)

(cffi:defcstruct js-class
  (name :pointer)
  (flags uint-32)
  (add-property js-property-op)
  (del-property js-property-op)
  (get-property js-property-op)
  (set-property js-property-op)
  (enumerate js-enumerate-op)
  (resolve js-resolve-op)
  (convert js-convert-op)
  (finalize js-finalize-op)
  (get-object-ops js-get-object-ops)
  (check-access js-check-access-op)
  (call js-native)
  (construct js-native)
  (xdr-object jsxdr-object-op)
  (has-instance js-has-instance-op)
  (mark js-mark-op)
  (reserve-slots js-reserve-slots-op))



(cffi:defcfun ("JS_SetOptions" js-set-options) uint-32 (cx :pointer)
                                                       (options uint-32))

(cffi:defcfun ("JS_SetRegExpInput" js-set-reg-exp-input) :void (cx :pointer)
                                                               (input :pointer)
                                                               (multiline js-bool))

(cffi:defcfun ("JS_ClearRegExpStatics" js-clear-reg-exp-statics) :void
                                                                       (cx :pointer))

(cffi:defcfun ("JS_GetInstancePrivate" js-get-instance-private) (:pointer :void)
                                                                                 (cx :pointer)
                                                                                 (obj :pointer)
                                                                                 (clasp :pointer)
                                                                                 (argv :pointer))

(cffi:defcfun ("JS_NewStringCopyN" js-new-string-copy-n) :pointer (cx :pointer)
                                                                  (s :pointer)
                                                                  (n size-t))

(cffi:defcfun ("JS_NewStringCopyZ" js-new-string-copy-z) :pointer (cx :pointer)
                                                                  (s :pointer))

(cffi:defcfun ("JS_ValueToInt32" js-value-to-int-32) js-bool (cx :pointer)
                                                             (v jsval)
                                                             (ip :pointer))

(cffi:defcfun ("JS_ValueToBoolean" js-value-to-boolean) js-bool (cx :pointer)
                                                                (v jsval)
                                                                (bp :pointer))

(cffi:defcfun ("JS_IsRunning" js-is-running) js-bool (cx :pointer))

(cffi:defcfun ("JS_GetProperty" js-get-property) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (name :pointer)
                                                         (vp :pointer))

(cffi:defcstruct js-principals
  (codebase (:pointer :char))
  (get-principal-array :pointer)
  (global-privileges-enabled :pointer)
  (refcount jsrefcount)
  (destroy :pointer)
  (subsume :pointer))

(cffi:defcfun ("JS_EvaluateUCScriptForPrincipals" js-evaluate-uc-script-for-principals) js-bool
                                                                                                (cx :pointer)
                                                                                                (obj :pointer)
                                                                                                (principals :pointer)
                                                                                                (chars :pointer)
                                                                                                (length uint-n)
                                                                                                (filename :pointer)
                                                                                                (lineno uint-n)
                                                                                                (rval :pointer))

(cffi:defcstruct js-id-array
  (length jsint)
  (vector jsid :count 1))

(cffi:defcfun ("JS_EnumerateResolvedStandardClasses" js-enumerate-resolved-standard-classes) :pointer
                                                                                                      (cx :pointer)
                                                                                                      (obj :pointer)
                                                                                                      (ida :pointer))

(cffi:defcstruct js-exception-state
  )

(cffi:defcfun ("JS_DropExceptionState" js-drop-exception-state) :void
                                                                      (cx :pointer)
                                                                      (state :pointer))

(cffi:defcstruct js-auto-local-root-scope
  (m-context :pointer))

(cffi:defcfun ("JS_SetScriptStackQuota" js-set-script-stack-quota) :void
                                                                         (cx :pointer)
                                                                         (quota size-t))

(cffi::defctype js-uword :unsigned-long)

(cffi::defctype jsuword js-uword)

(cffi:defcfun ("JS_SetThreadStackLimit" js-set-thread-stack-limit) :void
                                                                         (cx :pointer)
                                                                         (limit-addr jsuword))

(cffi:defcfun ("JS_GetElement" js-get-element) js-bool (cx :pointer)
                                                       (obj :pointer)
                                                       (index jsint)
                                                       (vp :pointer))

(cffi:defcfun ("JS_IsGCMarkingTracer" js-is-gc-marking-tracer) js-bool
                                                                       (trc :pointer))

(cffi:defcfun ("JS_GetFunctionObject" js-get-function-object) :pointer
                                                                       (fun :pointer))

(cffi:defcfun ("JS_IsAboutToBeFinalized" js-is-about-to-be-finalized) js-bool
                                                                              (cx :pointer)
                                                                              (thing (:pointer :void)))

(cffi:defcfun ("JS_GetImplementationVersion" js-get-implementation-version) :pointer)

(cffi:defcfun ("JS_malloc" js-malloc) (:pointer :void) (cx :pointer)
                                                       (nbytes size-t))

(cffi:defcfun ("JS_GetStringChars" js-get-string-chars) :pointer (str :pointer))

(cffi:defcfun ("JS_ReportWarning" js-report-warning) js-bool (cx :pointer)
                                                             (format :pointer)common-lisp:&rest)

(cffi:defcfun ("JS_DeleteElement2" js-delete-element-2) js-bool (cx :pointer)
                                                                (obj :pointer)
                                                                (index jsint)
                                                                (rval :pointer))

(cffi:defcfun ("JS_ConcatStrings" js-concat-strings) :pointer (cx :pointer)
                                                              (left :pointer)
                                                              (right :pointer))

(cffi:defcfun ("JS_ShutDown" js-shut-down) :void)

(cffi:defcfun ("JS_GetFunctionFlags" js-get-function-flags) uint-n
                                                                   (fun :pointer))

(cffi:defcfun ("JS_GetLocaleCallbacks" js-get-locale-callbacks) :pointer
                                                                         (cx :pointer))

(cffi:defcfun ("JS_ValueToECMAInt32" js-value-to-ecma-int-32) js-bool
                                                                      (cx :pointer)
                                                                      (v jsval)
                                                                      (ip :pointer))

(cffi:defcfun ("JS_DefineUCProperty" js-define-uc-property) js-bool
                                                                    (cx :pointer)
                                                                    (obj :pointer)
                                                                    (name :pointer)
                                                                    (namelen size-t)
                                                                    (value jsval)
                                                                    (getter js-property-op)
                                                                    (setter js-property-op)
                                                                    (attrs uint-n))

(cffi:defcfun ("JS_GetFunctionName" js-get-function-name) :pointer
                                                                   (fun :pointer))

(cffi:defcfun ("JS_EvaluateScriptForPrincipals" js-evaluate-script-for-principals) js-bool
                                                                                           (cx :pointer)
                                                                                           (obj :pointer)
                                                                                           (principals :pointer)
                                                                                           (bytes :pointer)
                                                                                           (length uint-n)
                                                                                           (filename :pointer)
                                                                                           (lineno uint-n)
                                                                                           (rval :pointer))

(cffi:defcfun ("JS_EnumerateStandardClasses" js-enumerate-standard-classes) js-bool
                                                                                    (cx :pointer)
                                                                                    (obj :pointer))

(cffi:defcenum js-type
  (:jstype-void 0)
  (:jstype-object 1)
  (:jstype-function 2)
  (:jstype-string 3)
  (:jstype-number 4)
  (:jstype-boolean 5)
  (:jstype-null 6)
  (:jstype-xml 7)
  (:jstype-limit 8))

(cffi:defcfun ("JS_ConvertStub" js-convert-stub) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (type js-type)
                                                         (vp :pointer))

(cffi:defcfun ("JS_CloneFunctionObject" js-clone-function-object) :pointer
                                                                           (cx :pointer)
                                                                           (funobj :pointer)
                                                                           (parent :pointer))

(cffi:defcfun ("JS_BeginRequest" js-begin-request) :void (cx :pointer))

(cffi::defctype js-object-principals-finder :pointer)

(cffi:defcfun ("JS_SetObjectPrincipalsFinder" js-set-object-principals-finder) js-object-principals-finder
                                                                                                           (rt :pointer)
                                                                                                           (fop js-object-principals-finder))

(cffi:defcfun ("JS_GetPendingException" js-get-pending-exception) js-bool
                                                                          (cx :pointer)
                                                                          (vp :pointer))

(cffi:defcfun ("JS_GetStringBytes" js-get-string-bytes) (:pointer :char)
                                                                         (str :pointer))

(cffi:defcfun ("JS_DefineUCFunction" js-define-uc-function) :pointer
                                                                     (cx :pointer)
                                                                     (obj :pointer)
                                                                     (name :pointer)
                                                                     (namelen size-t)
                                                                     (call js-native)
                                                                     (nargs uint-n)
                                                                     (attrs uint-n))

(cffi:defcfun ("JS_GetContextThread" js-get-context-thread) jsword (cx :pointer))

(cffi:defcfun ("JS_NewString" js-new-string) :pointer (cx :pointer)
                                                      (bytes (:pointer :char))
                                                      (length size-t))

(cffi:defcfun ("JS_HasUCProperty" js-has-uc-property) js-bool (cx :pointer)
                                                              (obj :pointer)
                                                              (name :pointer)
                                                              (namelen size-t)
                                                              (vp :pointer))

(cffi:defcfun ("JS_IdToValue" js-id-to-value) js-bool (cx :pointer) (id jsid)
                                                      (vp :pointer))

(cffi::defctype int-n js-intn)

(cffi::defctype js-string-finalize-op :pointer)

(cffi:defcfun ("JS_AddExternalStringFinalizer" js-add-external-string-finalizer) int-n
                                                                                       (finalizer js-string-finalize-op))

(cffi::defctype js-trace-data-op :pointer)

(cffi:defcfun ("JS_SetExtraGCRoots" js-set-extra-gc-roots) :void (rt :pointer)
                                                                 (trace-op js-trace-data-op)
                                                                 (data (:pointer :void)))

(cffi:defcfun ("JS_NewExternalString" js-new-external-string) :pointer
                                                                       (cx :pointer)
                                                                       (chars :pointer)
                                                                       (length size-t)
                                                                       (type int-n))

(cffi:defcfun ("JS_EvaluateUCScript" js-evaluate-uc-script) js-bool
                                                                    (cx :pointer)
                                                                    (obj :pointer)
                                                                    (chars :pointer)
                                                                    (length uint-n)
                                                                    (filename :pointer)
                                                                    (lineno uint-n)
                                                                    (rval :pointer))

(cffi:defcfun ("JS_AddNamedRoot" js-add-named-root) js-bool (cx :pointer)
                                                            (rp (:pointer :void))
                                                            (name :pointer))

(cffi:defcfun ("JS_SetReservedSlot" js-set-reserved-slot) js-bool (cx :pointer)
                                                                  (obj :pointer)
                                                                  (index uint-32)
                                                                  (v jsval))

(cffi:defcfun ("JS_DecodeBytes" js-decode-bytes) js-bool (cx :pointer)
                                                         (src :pointer)
                                                         (srclen size-t)
                                                         (dst :pointer)
                                                         (dstlenp :pointer))

(cffi:defcfun ("JS_SetUCProperty" js-set-uc-property) js-bool (cx :pointer)
                                                              (obj :pointer)
                                                              (name :pointer)
                                                              (namelen size-t)
                                                              (vp :pointer))

(cffi:defcfun ("JS_UnlockGCThingRT" js-unlock-gc-thing-rt) js-bool (rt :pointer)
                                                                   (thing (:pointer :void)))

(cffi:defcfun ("JS_SealObject" js-seal-object) js-bool (cx :pointer)
                                                       (obj :pointer)
                                                       (deep js-bool))

(cffi:defcfun ("JS_GetConstructor" js-get-constructor) :pointer (cx :pointer)
                                                                (proto :pointer))

(cffi:defcfun ("JS_CallFunctionName" js-call-function-name) js-bool
                                                                    (cx :pointer)
                                                                    (obj :pointer)
                                                                    (name :pointer)
                                                                    (argc uint-n)
                                                                    (argv :pointer)
                                                                    (rval :pointer))

(cffi:defcfun ("JS_TypeOfValue" js-type-of-value) js-type (cx :pointer)
                                                          (v jsval))

(cffi:defcfun ("JS_EncodeCharacters" js-encode-characters) js-bool (cx :pointer)
                                                                   (src :pointer)
                                                                   (srclen size-t)
                                                                   (dst (:pointer :char))
                                                                   (dstlenp :pointer))

(cffi::defctype js-int-64 :long)

(cffi::defctype int-64 js-int-64)

(cffi:defcfun ("JS_Now" js-now) int-64)

(cffi:defcfun ("JS_NewDouble" js-new-double) :pointer (cx :pointer) (d jsdouble))

(cffi:defcfun ("JS_ForgetLocalRoot" js-forget-local-root) :void (cx :pointer)
                                                                (thing (:pointer :void)))

(cffi:defcfun ("JS_SetGCCallbackRT" js-set-gc-callback-rt) jsgc-callback
                                                                         (rt :pointer)
                                                                         (cb jsgc-callback))

(cffi:defcfun ("JS_EncodeString" js-encode-string) (:pointer :char)
                                                                    (cx :pointer)
                                                                    (str :pointer))

(cffi:defcfun ("JS_DeleteElement" js-delete-element) js-bool (cx :pointer)
                                                             (obj :pointer)
                                                             (index jsint))

(cffi::defctype js-operation-callback :pointer)

(cffi:defcfun ("JS_GetOperationCallback" js-get-operation-callback) js-operation-callback
                                                                                          (cx :pointer))

(cffi:defcfun ("JS_ResolveStub" js-resolve-stub) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (id jsval))

(cffi:defcfun ("JS_GetGlobalForObject" js-get-global-for-object) :pointer
                                                                          (cx :pointer)
                                                                          (obj :pointer))

(cffi:defcfun ("JS_strdup" js-strdup) (:pointer :char) (cx :pointer)
                                                       (s :pointer))

(cffi:defcfun ("JS_CompileFile" js-compile-file) :pointer (cx :pointer)
                                                          (obj :pointer)
                                                          (filename :pointer))

(cffi:defcfun ("JS_UndependString" js-undepend-string) :pointer (cx :pointer)
                                                                (str :pointer))

(cffi:defcfun ("JS_GetScriptObject" js-get-script-object) :pointer
                                                                   (script :pointer))

(cffi::defctype js-equality-op :pointer)

(cffi::defctype js-object-op :pointer)

(cffi::defctype js-iterator-op :pointer)

(cffi:defcstruct js-extended-class
  (base js-class)
  (equality js-equality-op)
  (outer-object js-object-op)
  (inner-object js-object-op)
  (iterator-object js-iterator-op)
  (wrapped-object js-object-op)
  (reserved-0 :pointer)
  (reserved-1 :pointer)
  (reserved-2 :pointer))

(cffi:defcfun ("JS_NewRegExpObject" js-new-reg-exp-object) :pointer
                                                                    (cx :pointer)
                                                                    (bytes (:pointer :char))
                                                                    (length size-t)
                                                                    (flags uint-n))

(cffi:defcfun ("JS_DeleteProperty" js-delete-property) js-bool (cx :pointer)
                                                               (obj :pointer)
                                                               (name :pointer))

(cffi:defcfun ("JS_IsArrayObject" js-is-array-object) js-bool (cx :pointer)
                                                              (obj :pointer))

(cffi:defcfun ("JS_ExecuteScriptPart" js-execute-script-part) js-bool
                                                                      (cx :pointer)
                                                                      (obj :pointer)
                                                                      (script :pointer)
                                                                      (part js-exec-part)
                                                                      (rval :pointer))

(cffi:defcfun ("JS_Enumerate" js-enumerate) :pointer (cx :pointer)
                                                     (obj :pointer))

(cffi:defcfun ("JS_DefineUCPropertyWithTinyId" js-define-uc-property-with-tiny-id) js-bool
                                                                                           (cx :pointer)
                                                                                           (obj :pointer)
                                                                                           (name :pointer)
                                                                                           (namelen size-t)
                                                                                           (tinyid int-8)
                                                                                           (value jsval)
                                                                                           (getter js-property-op)
                                                                                           (setter js-property-op)
                                                                                           (attrs uint-n))

(cffi:defcfun ("JS_CompileFunction" js-compile-function) :pointer (cx :pointer)
                                                                  (obj :pointer)
                                                                  (name :pointer)
                                                                  (nargs uint-n)
                                                                  (argnames :pointer)
                                                                  (bytes :pointer)
                                                                  (length size-t)
                                                                  (filename :pointer)
                                                                  (lineno uint-n))

(cffi:defcfun ("JS_ClearRegExpRoots" js-clear-reg-exp-roots) :void (cx :pointer))

(cffi:defcstruct js-property
  (id jsid))

(cffi:defcfun ("JS_NewPropertyIterator" js-new-property-iterator) :pointer
                                                                           (cx :pointer)
                                                                           (obj :pointer))

(cffi:defcfun ("JS_PropertyStub" js-property-stub) js-bool (cx :pointer)
                                                           (obj :pointer)
                                                           (id jsval)
                                                           (vp :pointer))

(cffi:defcfun ("JS_Lock" js-lock) :void (rt :pointer))

(cffi:defcfun ("JS_SaveExceptionState" js-save-exception-state) :pointer
                                                                         (cx :pointer))

(cffi:defcstruct js-const-double-spec
  (dval jsdouble)
  (name :pointer)
  (flags uint-8)
  (spare uint-8 :count 3))

(cffi:defcfun ("JS_DefineConstDoubles" js-define-const-doubles) js-bool
                                                                        (cx :pointer)
                                                                        (obj :pointer)
                                                                        (cds :pointer))

(cffi:defcfun ("JS_SetPrivate" js-set-private) js-bool (cx :pointer)
                                                       (obj :pointer)
                                                       (data (:pointer :void)))

(cffi:defcfun ("JS_IsConstructing" js-is-constructing) js-bool (cx :pointer))

(cffi:defcfun ("JS_CallTracer" js-call-tracer) :void (trc :pointer)
                                                     (thing (:pointer :void))
                                                     (kind uint-32))

(cffi:defcenum jsgc-param-key
  (:jsgc-max-bytes 0)
  (:jsgc-max-malloc-bytes 1)
  (:jsgc-stackpool-lifespan 2))

(cffi:defcfun ("JS_SetGCParameter" js-set-gc-parameter) :void (rt :pointer)
                                                              (key jsgc-param-key)
                                                              (value uint-32))

(cffi:defcfun ("JS_SetContextPrivate" js-set-context-private) :void
                                                                    (cx :pointer)
                                                                    (data (:pointer :void)))

(cffi:defcstruct js-function-spec
  (name :pointer)
  (call js-native)
  (nargs uint-16)
  (flags uint-16)
  (extra uint-32))

(cffi:defcfun ("JS_GetRuntime" js-get-runtime) :pointer (cx :pointer))

(cffi:defcfun ("JS_ReportErrorNumberUC" js-report-error-number-uc) :void
                                                                         (cx :pointer)
                                                                         (error-callback js-error-callback)
                                                                         (user-ref (:pointer :void))
                                                                         (error-number uint-n)common-lisp:&rest)

(cffi:defcfun ("JS_LookupUCProperty" js-lookup-uc-property) js-bool
                                                                    (cx :pointer)
                                                                    (obj :pointer)
                                                                    (name :pointer)
                                                                    (namelen size-t)
                                                                    (vp :pointer))

(cffi:defcfun ("JS_NewFunction" js-new-function) :pointer (cx :pointer)
                                                          (call js-native)
                                                          (nargs uint-n)
                                                          (flags uint-n)
                                                          (parent :pointer)
                                                          (name :pointer))

(cffi:defcfun ("JS_SetCallReturnValue2" js-set-call-return-value-2) :void
                                                                          (cx :pointer)
                                                                          (v jsval))

(cffi:defcfun ("JS_SetRuntimePrivate" js-set-runtime-private) :void
                                                                    (rt :pointer)
                                                                    (data (:pointer :void)))

(cffi:defcfun ("JS_EnterLocalRootScope" js-enter-local-root-scope) js-bool
                                                                           (cx :pointer))

(cffi:defcfun ("JS_ToggleOptions" js-toggle-options) uint-32 (cx :pointer)
                                                             (options uint-32))

(cffi:defcfun ("JS_DefineFunction" js-define-function) :pointer (cx :pointer)
                                                                (obj :pointer)
                                                                (name :pointer)
                                                                (call js-native)
                                                                (nargs uint-n)
                                                                (attrs uint-n))

(cffi:defcfun ("JS_GetObjectId" js-get-object-id) js-bool (cx :pointer)
                                                          (obj :pointer)
                                                          (idp :pointer))

(cffi:defcfun ("JS_SetOperationLimit" js-set-operation-limit) :void
                                                                    (cx :pointer)
                                                                    (operation-limit uint-32))

(cffi:defcfun ("JS_InstanceOf" js-instance-of) js-bool (cx :pointer)
                                                       (obj :pointer)
                                                       (clasp :pointer)
                                                       (argv :pointer))

(cffi:defcfun ("JS_ComputeThis" js-compute-this) jsval (cx :pointer)
                                                       (vp :pointer))

(cffi:defcfun ("JS_GetPrivate" js-get-private) (:pointer :void) (cx :pointer)
                                                                (obj :pointer))

(cffi:defcfun ("JS_CompileUCScriptForPrincipals" js-compile-uc-script-for-principals) :pointer
                                                                                               (cx :pointer)
                                                                                               (obj :pointer)
                                                                                               (principals :pointer)
                                                                                               (chars :pointer)
                                                                                               (length size-t)
                                                                                               (filename :pointer)
                                                                                               (lineno uint-n))

(cffi:defcfun ("JS_InitClass" js-init-class) :pointer (cx :pointer)
                                                      (obj :pointer)
                                                      (parent-proto :pointer)
                                                      (clasp :pointer)
                                                      (constructor js-native)
                                                      (nargs uint-n)
                                                      (ps :pointer)
                                                      (fs :pointer)
                                                      (static-ps :pointer)
                                                      (static-fs :pointer))

(cffi:defcfun ("JS_NewGrowableString" js-new-growable-string) :pointer
                                                                       (cx :pointer)
                                                                       (chars :pointer)
                                                                       (length size-t))

(cffi:defcfun ("JS_CompareStrings" js-compare-strings) int-n (str-1 :pointer)
                                                             (str-2 :pointer))

(cffi:defcfun ("JS_ClearContextThread" js-clear-context-thread) jsword
                                                                       (cx :pointer))

(cffi:defcfun ("JS_HasInstance" js-has-instance) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (v jsval) (bp :pointer))

(cffi:defcfun ("JS_SetPrototype" js-set-prototype) js-bool (cx :pointer)
                                                           (obj :pointer)
                                                           (proto :pointer))

(cffi:defcfun ("JS_LookupProperty" js-lookup-property) js-bool (cx :pointer)
                                                               (obj :pointer)
                                                               (name :pointer)
                                                               (vp :pointer))

(cffi:defcfun ("JS_ObjectIsFunction" js-object-is-function) js-bool
                                                                    (cx :pointer)
                                                                    (obj :pointer))

(cffi:defcfun ("JS_SetParent" js-set-parent) js-bool (cx :pointer)
                                                     (obj :pointer)
                                                     (parent :pointer))

(cffi:defcfun ("JS_ExecuteScript" js-execute-script) js-bool (cx :pointer)
                                                             (obj :pointer)
                                                             (script :pointer)
                                                             (rval :pointer))

(cffi:defcstruct js-error-report
  (filename :pointer)
  (lineno uint-n)
  (linebuf :pointer)
  (tokenptr :pointer)
  (uclinebuf :pointer)
  (uctokenptr :pointer)
  (flags uint-n)
  (error-number uint-n)
  (ucmessage :pointer)
  (message-args :pointer))

(cffi:defcfun ("JS_CallFunctionValue" js-call-function-value) js-bool
                                                                      (cx :pointer)
                                                                      (obj :pointer)
                                                                      (fval jsval)
                                                                      (argc uint-n)
                                                                      (argv :pointer)
                                                                      (rval :pointer))

(cffi:defcfun ("JS_CallFunction" js-call-function) js-bool (cx :pointer)
                                                           (obj :pointer)
                                                           (fun :pointer)
                                                           (argc uint-n)
                                                           (argv :pointer)
                                                           (rval :pointer))

(cffi:defcfun ("JS_AliasElement" js-alias-element) js-bool (cx :pointer)
                                                           (obj :pointer)
                                                           (name :pointer)
                                                           (alias jsint))

(cffi:defcfun ("JS_free" js-free) :void (cx :pointer) (p (:pointer :void)))

(cffi:defcfun ("JS_GetPropertyAttributes" js-get-property-attributes) js-bool
                                                                              (cx :pointer)
                                                                              (obj :pointer)
                                                                              (name :pointer)
                                                                              (attrsp :pointer)
                                                                              (foundp :pointer))

(cffi:defcfun ("JS_ResolveStandardClass" js-resolve-standard-class) js-bool
                                                                            (cx :pointer)
                                                                            (obj :pointer)
                                                                            (id jsval)
                                                                            (resolved :pointer))

(cffi:defcfun ("JS_GetMethod" js-get-method) js-bool (cx :pointer)
                                                     (obj :pointer)
                                                     (name :pointer)
                                                     (objp :pointer)
                                                     (vp :pointer))

(cffi:defcfun ("JS_DestroyIdArray" js-destroy-id-array) :void (cx :pointer)
                                                              (ida :pointer))

(cffi:defcfun ("JS_NewUCRegExpObject" js-new-uc-reg-exp-object) :pointer
                                                                         (cx :pointer)
                                                                         (chars :pointer)
                                                                         (length size-t)
                                                                         (flags uint-n))

(cffi:defcfun ("JS_DeleteProperty2" js-delete-property-2) js-bool (cx :pointer)
                                                                  (obj :pointer)
                                                                  (name :pointer)
                                                                  (rval :pointer))

(cffi:defcfun ("JS_NewDependentString" js-new-dependent-string) :pointer
                                                                         (cx :pointer)
                                                                         (str :pointer)
                                                                         (start size-t)
                                                                         (length size-t))

(cffi:defcfun ("JS_ErrorFromException" js-error-from-exception) :pointer
                                                                         (cx :pointer)
                                                                         (v jsval))

(cffi:defcfun ("JS_RestoreExceptionState" js-restore-exception-state) :void
                                                                            (cx :pointer)
                                                                            (state :pointer))

(cffi:defcfun ("JS_ClearPendingException" js-clear-pending-exception) :void
                                                                            (cx :pointer))

(cffi:defcenum js-version
  (:jsversion-1-0 100)
  (:jsversion-1-1 110)
  (:jsversion-1-2 120)
  (:jsversion-1-3 130)
  (:jsversion-1-4 140)
  (:jsversion-ecma-3 148)
  (:jsversion-1-5 150)
  (:jsversion-1-6 160)
  (:jsversion-1-7 170)
  (:jsversion-1-8 180)
  (:jsversion-default 0)
  (:jsversion-unknown -1)
  (:jsversion-latest 180))

(cffi:defcfun ("JS_SetVersion" js-set-version) js-version (cx :pointer)
                                                          (version js-version))

(cffi:defcfun ("JS_IsExceptionPending" js-is-exception-pending) js-bool
                                                                        (cx :pointer))

(cffi:defcfun ("JS_SetGlobalObject" js-set-global-object) :void (cx :pointer)
                                                                (obj :pointer))

(cffi:defcfun ("JS_LeaveLocalRootScopeWithResult" js-leave-local-root-scope-with-result) :void
                                                                                               (cx :pointer)
                                                                                               (rval jsval))

(cffi:defcfun ("JS_StringToVersion" js-string-to-version) js-version
                                                                     (string :pointer))

(cffi::defctype js-new-object-map-op :pointer)

(cffi::defctype js-object-map-op :pointer)

(cffi::defctype js-lookup-prop-op :pointer)

(cffi::defctype js-define-prop-op :pointer)

(cffi::defctype js-property-id-op :pointer)

(cffi::defctype js-attributes-op :pointer)

(cffi::defctype js-new-enumerate-op :pointer)

(cffi::defctype js-check-access-id-op :pointer)

(cffi::defctype js-property-ref-op :pointer)

(cffi::defctype js-set-object-slot-op :pointer)

(cffi::defctype js-trace-op :pointer)

(cffi::defctype js-get-required-slot-op :pointer)

(cffi::defctype js-set-required-slot-op :pointer)

(cffi:defcstruct js-object-ops
  (new-object-map js-new-object-map-op)
  (destroy-object-map js-object-map-op)
  (lookup-property js-lookup-prop-op)
  (define-property js-define-prop-op)
  (get-property js-property-id-op)
  (set-property js-property-id-op)
  (get-attributes js-attributes-op)
  (set-attributes js-attributes-op)
  (delete-property js-property-id-op)
  (default-value js-convert-op)
  (enumerate js-new-enumerate-op)
  (check-access js-check-access-id-op)
  (this-object js-object-op)
  (drop-property js-property-ref-op)
  (call js-native)
  (construct js-native)
  (xdr-object jsxdr-object-op)
  (has-instance js-has-instance-op)
  (set-proto js-set-object-slot-op)
  (set-parent js-set-object-slot-op)
  (js-trace js-trace-op)
  (clear js-finalize-op)
  (get-required-slot js-get-required-slot-op)
  (set-required-slot js-set-required-slot-op))

(cffi:defcfun ("JS_InternString" js-intern-string) :pointer (cx :pointer)
                                                            (s :pointer))

(cffi:defcfun ("JS_ClearScope" js-clear-scope) :void (cx :pointer)
                                                     (obj :pointer))

(cffi:defcfun ("JS_GetParent" js-get-parent) :pointer (cx :pointer)
                                                      (obj :pointer))

(cffi:defcfun ("JS_SetElement" js-set-element) js-bool (cx :pointer)
                                                       (obj :pointer)
                                                       (index jsint)
                                                       (vp :pointer))

(cffi:defcfun ("JS_BufferIsCompilableUnit" js-buffer-is-compilable-unit) js-bool
                                                                                 (cx :pointer)
                                                                                 (obj :pointer)
                                                                                 (bytes :pointer)
                                                                                 (length size-t))

(cffi:defcfun ("JS_SetPendingException" js-set-pending-exception) :void
                                                                        (cx :pointer)
                                                                        (v jsval))

(cffi:defcfun ("JS_ReportErrorFlagsAndNumber" js-report-error-flags-and-number) js-bool
                                                                                        (cx :pointer)
                                                                                        (flags uint-n)
                                                                                        (error-callback js-error-callback)
                                                                                        (user-ref (:pointer :void))
                                                                                        (error-number uint-n)common-lisp:&rest)

(cffi:defcfun ("JS_SetArrayLength" js-set-array-length) js-bool (cx :pointer)
                                                                (obj :pointer)
                                                                (length jsuint))

(cffi:defcfun ("JS_EvaluateScript" js-evaluate-script) js-bool (cx :pointer)
                                                               (obj :pointer)
                                                               (bytes :pointer)
                                                               (length uint-n)
                                                               (filename :pointer)
                                                               (lineno uint-n)
                                                               (rval :pointer))

(cffi:defcfun ("JS_GetFunctionId" js-get-function-id) :pointer (fun :pointer))

(cffi:defcfun ("JS_GetPositiveInfinityValue" js-get-positive-infinity-value) jsval
                                                                                   (cx :pointer))

(cffi:defcfun ("JS_GetVersion" js-get-version) js-version (cx :pointer))

(cffi:defcfun ("JS_DestroyContext" js-destroy-context) :void (cx :pointer))

(cffi:defcfun ("JS_realloc" js-realloc) (:pointer :void) (cx :pointer)
                                                         (p (:pointer :void))
                                                         (nbytes size-t))

(cffi::defctype js-branch-callback :pointer)

(cffi:defcfun ("JS_SetBranchCallback" js-set-branch-callback) js-branch-callback
                                                                                 (cx :pointer)
                                                                                 (cb js-branch-callback))

(cffi:defcfun ("JS_PushArguments" js-push-arguments) :pointer (cx :pointer)
                                                              (markp :pointer)
                                                              (format :pointer)common-lisp:&rest)

(cffi:defcfun ("JS_GetPrototype" js-get-prototype) :pointer (cx :pointer)
                                                            (obj :pointer))

(cffi:defcfun ("JS_ClearNewbornRoots" js-clear-newborn-roots) :void
                                                                    (cx :pointer))

(cffi:defcfun ("JS_ThrowStopIteration" js-throw-stop-iteration) js-bool
                                                                        (cx :pointer))

(cffi:defcfun ("JS_ResumeRequest" js-resume-request) :void (cx :pointer)
                                                           (save-depth jsrefcount))

(cffi:defcfun ("JS_TraceChildren" js-trace-children) :void (trc :pointer)
                                                           (thing (:pointer :void))
                                                           (kind uint-32))

(cffi:defcfun ("JS_ConstructObject" js-construct-object) :pointer (cx :pointer)
                                                                  (clasp :pointer)
                                                                  (proto :pointer)
                                                                  (parent :pointer))

(cffi:defcfun ("JS_GetExternalStringGCType" js-get-external-string-gc-type) int-n
                                                                                  (rt :pointer)
                                                                                  (str :pointer))

(cffi:defcfun ("JS_ConstructObjectWithArguments" js-construct-object-with-arguments) :pointer
                                                                                              (cx :pointer)
                                                                                              (clasp :pointer)
                                                                                              (proto :pointer)
                                                                                              (parent :pointer)
                                                                                              (argc uint-n)
                                                                                              (argv :pointer))

(cffi:defcfun ("JS_NewUCString" js-new-uc-string) :pointer (cx :pointer)
                                                           (chars :pointer)
                                                           (length size-t))

(cffi:defcfun ("JS_DefineObject" js-define-object) :pointer (cx :pointer)
                                                            (obj :pointer)
                                                            (name :pointer)
                                                            (clasp :pointer)
                                                            (proto :pointer)
                                                            (attrs uint-n))

(cffi:defcfun ("JS_GetReservedSlot" js-get-reserved-slot) js-bool (cx :pointer)
                                                                  (obj :pointer)
                                                                  (index uint-32)
                                                                  (vp :pointer))

(cffi::defctype js-get-method-op :pointer)

(cffi::defctype js-set-method-op :pointer)

(cffi::defctype js-enumerate-values-op :pointer)

(cffi::defctype js-concatenate-op :pointer)

(cffi:defcstruct jsxml-object-ops
  (base js-object-ops)
  (get-method js-get-method-op)
  (set-method js-set-method-op)
  (enumerate-values js-enumerate-values-op)
  (equality js-equality-op)
  (concatenate js-concatenate-op))

(cffi:defcfun ("JS_ReportOutOfMemory" js-report-out-of-memory) :void
                                                                     (cx :pointer))

(cffi:defcfun ("JS_Unlock" js-unlock) :void (rt :pointer))

(cffi:defcfun ("JS_GetEmptyStringValue" js-get-empty-string-value) jsval
                                                                         (cx :pointer))

(cffi:defcfun ("JS_HasProperty" js-has-property) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (name :pointer)
                                                         (foundp :pointer))

(cffi:defcfun ("JS_CompileScript" js-compile-script) :pointer (cx :pointer)
                                                              (obj :pointer)
                                                              (bytes :pointer)
                                                              (length size-t)
                                                              (filename :pointer)
                                                              (lineno uint-n))

(cffi:defcfun ("JS_ReportError" js-report-error) :void (cx :pointer)
                                                       (format :pointer)common-lisp:&rest)

(cffi:defcfun ("JS_MaybeGC" js-maybe-gc) :void (cx :pointer))

(cffi:defcfun ("JS_SaveFrameChain" js-save-frame-chain) :pointer (cx :pointer))

(cffi:defcfun ("JS_RemoveRoot" js-remove-root) js-bool (cx :pointer)
                                                       (rp (:pointer :void)))

(cffi:defcfun ("JS_InternUCString" js-intern-uc-string) :pointer (cx :pointer)
                                                                 (s :pointer))

(cffi:defcfun ("JS_ValueToId" js-value-to-id) js-bool (cx :pointer) (v jsval)
                                                      (idp :pointer))

(cffi:defcfun ("JS_HasElement" js-has-element) js-bool (cx :pointer)
                                                       (obj :pointer)
                                                       (index jsint)
                                                       (foundp :pointer))

(cffi:defcfun ("JS_CompileUCFunctionForPrincipals" js-compile-uc-function-for-principals) :pointer
                                                                                                   (cx :pointer)
                                                                                                   (obj :pointer)
                                                                                                   (principals :pointer)
                                                                                                   (name :pointer)
                                                                                                   (nargs uint-n)
                                                                                                   (argnames :pointer)
                                                                                                   (chars :pointer)
                                                                                                   (length size-t)
                                                                                                   (filename :pointer)
                                                                                                   (lineno uint-n))

(cffi:defcfun ("JS_GetNegativeInfinityValue" js-get-negative-infinity-value) jsval
                                                                                   (cx :pointer))

(cffi:defcfun ("JS_AlreadyHasOwnElement" js-already-has-own-element) js-bool
                                                                             (cx :pointer)
                                                                             (obj :pointer)
                                                                             (index jsint)
                                                                             (foundp :pointer))

(cffi:defcfun ("JS_Finish" js-finish) :void (rt :pointer))

(cffi:defcfun ("JS_ReportErrorNumber" js-report-error-number) :void
                                                                    (cx :pointer)
                                                                    (error-callback js-error-callback)
                                                                    (user-ref (:pointer :void))
                                                                    (error-number uint-n)common-lisp:&rest)

(cffi:defcfun ("JS_DecompileFunctionBody" js-decompile-function-body) :pointer
                                                                               (cx :pointer)
                                                                               (fun :pointer)
                                                                               (indent uint-n))

(cffi:defcfun ("JS_ValueToConstructor" js-value-to-constructor) :pointer
                                                                         (cx :pointer)
                                                                         (v jsval))

(cffi:defcfun ("JS_ValueToECMAUint32" js-value-to-ecma-uint-32) js-bool
                                                                        (cx :pointer)
                                                                        (v jsval)
                                                                        (ip :pointer))

(cffi:defcfun ("JS_VersionToString" js-version-to-string) :pointer
                                                                   (version js-version))

(cffi:defcfun ("JS_CompileScriptForPrincipals" js-compile-script-for-principals) :pointer
                                                                                          (cx :pointer)
                                                                                          (obj :pointer)
                                                                                          (principals :pointer)
                                                                                          (bytes :pointer)
                                                                                          (length size-t)
                                                                                          (filename :pointer)
                                                                                          (lineno uint-n))

(cffi:defcfun ("JS_SetOperationCallback" js-set-operation-callback) :void
                                                                          (cx :pointer)
                                                                          (callback js-operation-callback)
                                                                          (operation-limit uint-32))

(cffi:defcfun ("JS_DestroyContextNoGC" js-destroy-context-no-gc) :void
                                                                       (cx :pointer))

(cffi:defcfun ("JS_NewObject" js-new-object) :pointer (cx :pointer)
                                                      (clasp :pointer)
                                                      (proto :pointer)
                                                      (parent :pointer))

(cffi:defcfun ("JS_GetMethodById" js-get-method-by-id) js-bool (cx :pointer)
                                                               (obj :pointer)
                                                               (id jsid)
                                                               (objp :pointer)
                                                               (vp :pointer))

(cffi:defcfun ("JS_GetRuntimePrivate" js-get-runtime-private) (:pointer :void)
                                                                               (rt :pointer))

(cffi:defcfun ("JS_GetOptions" js-get-options) uint-32 (cx :pointer))

(cffi:defcfun ("JS_GetTypeName" js-get-type-name) :pointer (cx :pointer)
                                                           (type js-type))

(cffi:defcfun ("JS_DefineElement" js-define-element) js-bool (cx :pointer)
                                                             (obj :pointer)
                                                             (index jsint)
                                                             (value jsval)
                                                             (getter js-property-op)
                                                             (setter js-property-op)
                                                             (attrs uint-n))

(cffi:defcfun ("JS_ReportErrorFlagsAndNumberUC" js-report-error-flags-and-number-uc) js-bool
                                                                                             (cx :pointer)
                                                                                             (flags uint-n)
                                                                                             (error-callback js-error-callback)
                                                                                             (user-ref (:pointer :void))
                                                                                             (error-number uint-n)common-lisp:&rest)

(cffi:defcfun ("JS_ValueToString" js-value-to-string) :pointer (cx :pointer)
                                                               (v jsval))

(cffi:defcfun ("JS_NewArrayObject" js-new-array-object) :pointer (cx :pointer)
                                                                 (length jsint)
                                                                 (vector :pointer))

(cffi:defcfun ("JS_ConvertValue" js-convert-value) js-bool (cx :pointer)
                                                           (v jsval)
                                                           (type js-type)
                                                           (vp :pointer))

(cffi:defcfun ("JS_RemoveRootRT" js-remove-root-rt) js-bool (rt :pointer)
                                                            (rp (:pointer :void)))

(cffi:defcfun ("JS_SetProperty" js-set-property) js-bool (cx :pointer)
                                                         (obj :pointer)
                                                         (name :pointer)
                                                         (vp :pointer))

(cffi:defcfun ("JS_AlreadyHasOwnUCProperty" js-already-has-own-uc-property) js-bool
                                                                                    (cx :pointer)
                                                                                    (obj :pointer)
                                                                                    (name :pointer)
                                                                                    (namelen size-t)
                                                                                    (foundp :pointer))

(cffi:defcfun ("JS_NewObjectWithGivenProto" js-new-object-with-given-proto) :pointer
                                                                                     (cx :pointer)
                                                                                     (clasp :pointer)
                                                                                     (proto :pointer)
                                                                                     (parent :pointer))

(cffi:defcfun ("JS_CompileFileHandleForPrincipals" js-compile-file-handle-for-principals) :pointer
                                                                                                   (cx :pointer)
                                                                                                   (obj :pointer)
                                                                                                   (filename :pointer)
                                                                                                   (fh :pointer)
                                                                                                   (principals :pointer))

(cffi:defcfun ("JS_DefineFunctions" js-define-functions) js-bool (cx :pointer)
                                                                 (obj :pointer)
                                                                 (fs :pointer))

(cffi:defcfun ("JS_GetNaNValue" js-get-na-n-value) jsval (cx :pointer))

(cffi:defcfun ("JS_CompileUCScript" js-compile-uc-script) :pointer (cx :pointer)
                                                                   (obj :pointer)
                                                                   (chars :pointer)
                                                                   (length size-t)
                                                                   (filename :pointer)
                                                                   (lineno uint-n))

(cffi:defcfun ("JS_AddRoot" js-add-root) js-bool (cx :pointer)
                                                 (rp (:pointer :void)))

(cffi:defcfun ("JS_GetContextPrivate" js-get-context-private) (:pointer :void)
                                                                               (cx :pointer))

(cffi:defcfun ("JS_ValueToNumber" js-value-to-number) js-bool (cx :pointer)
                                                              (v jsval)
                                                              (dp :pointer))

(cffi:defcfun ("JS_GetClass" js-get-class) :pointer (obj :pointer))

(cffi:defcfun ("JS_NewDoubleValue" js-new-double-value) js-bool (cx :pointer)
                                                                (d jsdouble)
                                                                (rval :pointer))

(cffi:defcfun ("JS_LockGCThingRT" js-lock-gc-thing-rt) js-bool (rt :pointer)
                                                               (thing (:pointer :void)))

(cffi:defcfun ("JS_GetUCProperty" js-get-uc-property) js-bool (cx :pointer)
                                                              (obj :pointer)
                                                              (name :pointer)
                                                              (namelen size-t)
                                                              (vp :pointer))

(cffi:defcfun ("JS_ContextIterator" js-context-iterator) :pointer (rt :pointer)
                                                                  (iterp :pointer))

(cffi:defcfun ("JS_CompileFunctionForPrincipals" js-compile-function-for-principals) :pointer
                                                                                              (cx :pointer)
                                                                                              (obj :pointer)
                                                                                              (principals :pointer)
                                                                                              (name :pointer)
                                                                                              (nargs uint-n)
                                                                                              (argnames :pointer)
                                                                                              (bytes :pointer)
                                                                                              (length size-t)
                                                                                              (filename :pointer)
                                                                                              (lineno uint-n))

(cffi:defcfun ("JS_DestroyContextMaybeGC" js-destroy-context-maybe-gc) :void
                                                                             (cx :pointer))

(cffi:defcfun ("JS_GetOperationLimit" js-get-operation-limit) uint-32
                                                                      (cx :pointer))

(cffi:defcfun ("JS_EndRequest" js-end-request) :void (cx :pointer))

(cffi:defcfun ("JS_ReportPendingException" js-report-pending-exception) js-bool
                                                                                (cx :pointer))

(cffi:defcfun ("JS_DestroyScript" js-destroy-script) :void (cx :pointer)
                                                           (script :pointer))

(cffi::defctype js-error-reporter :pointer)

(cffi:defcfun ("JS_SetErrorReporter" js-set-error-reporter) js-error-reporter
                                                                              (cx :pointer)
                                                                              (er js-error-reporter))

(cffi:defcfun ("JS_MarkGCThing" js-mark-gc-thing) :void (cx :pointer)
                                                        (thing (:pointer :void))
                                                        (name :pointer)
                                                        (arg (:pointer :void)))

(cffi:defcenum js-proto-key
  (:js-proto-null 0)
  (:js-proto-object 1)
  (:js-proto-function 2)
  (:js-proto-array 3)
  (:js-proto-boolean 4)
  (:js-proto-call 5)
  (:js-proto-date 6)
  (:js-proto-math 7)
  (:js-proto-number 8)
  (:js-proto-string 9)
  (:js-proto-reg-exp 10)
  (:js-proto-script 11)
  (:js-proto-xml 12)
  (:js-proto-namespace 13)
  (:js-proto-q-name 14)
  (:js-proto-any-name 15)
  (:js-proto-attribute-name 16)
  (:js-proto-error 17)
  (:js-proto-internal-error 18)
  (:js-proto-eval-error 19)
  (:js-proto-range-error 20)
  (:js-proto-reference-error 21)
  (:js-proto-syntax-error 22)
  (:js-proto-type-error 23)
  (:js-proto-uri-error 24)
  (:js-proto-generator 25)
  (:js-proto-iterator 26)
  (:js-proto-stop-iteration 27)
  (:js-proto-unused-proto-28 28)
  (:js-proto-file 29)
  (:js-proto-block 30)
  (:js-proto-xml-filter 31)
  (:js-proto-no-such-method 32)
  (:js-proto-limit 33))

(cffi:defcfun ("JS_GetClassObject" js-get-class-object) js-bool (cx :pointer)
                                                                (obj :pointer)
                                                                (key js-proto-key)
                                                                (objp :pointer))

(cffi:defcfun ("JS_ThrowReportedError" js-throw-reported-error) js-bool
                                                                        (cx :pointer)
                                                                        (message :pointer)
                                                                        (reportp :pointer))

(cffi:defcfun ("JS_ReportAllocationOverflow" js-report-allocation-overflow) :void
                                                                                  (cx :pointer))

(cffi:defcfun ("JS_YieldRequest" js-yield-request) :void (cx :pointer))

(cffi:defcfun ("JS_DefinePropertyWithTinyId" js-define-property-with-tiny-id) js-bool
                                                                                      (cx :pointer)
                                                                                      (obj :pointer)
                                                                                      (name :pointer)
                                                                                      (tinyid int-8)
                                                                                      (value jsval)
                                                                                      (getter js-property-op)
                                                                                      (setter js-property-op)
                                                                                      (attrs uint-n))

(cffi:defcfun ("JS_RemoveExternalStringFinalizer" js-remove-external-string-finalizer) int-n
                                                                                             (finalizer js-string-finalize-op))

(cffi:defcfun ("JS_NewScriptObject" js-new-script-object) :pointer (cx :pointer)
                                                                   (script :pointer))

(cffi::defctype js-principals-transcoder :pointer)

(cffi:defcfun ("JS_SetPrincipalsTranscoder" js-set-principals-transcoder) js-principals-transcoder
                                                                                                   (rt :pointer)
                                                                                                   (px js-principals-transcoder))

(cffi:defcfun ("JS_GetPropertyAttrsGetterAndSetter" js-get-property-attrs-getter-and-setter) js-bool
                                                                                                     (cx :pointer)
                                                                                                     (obj :pointer)
                                                                                                     (name :pointer)
                                                                                                     (attrsp :pointer)
                                                                                                     (foundp :pointer)
                                                                                                     (getterp :pointer)
                                                                                                     (setterp :pointer))

#+nil
(cffi:defcfun ("_ZN13JSAutoRequestaSERKS_" js-auto-request-operator-=) js-auto-request (this :pointer)
                                                                                       (arg1 js-auto-request))

#+nil
(cffi:defcfun ("_ZN13JSAutoRequestC1ERKS_" js-auto-request-constructor) :void (this :pointer)
                                                                              (arg1 js-auto-request))
#+nil
(cl:defun js-auto-request-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-auto-request)))
    (js-auto-request-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN13JSAutoRequestC1EP9JSContext" js-auto-request-constructor) :void (this :pointer)
                                                                                     (cx :pointer))
#+nil
(cl:defun js-auto-request-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-auto-request)))
    (js-auto-request-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN13JSAutoRequest7suspendEv" suspend) :void (this :pointer))

#+nil
(cffi:defcfun ("_ZN13JSAutoRequest6resumeEv" resume) :void (this :pointer))

#+nil
(cffi:defcfun ("_ZN7JSClassaSERKS_" js-class-operator-=) js-class (this :pointer)
                                                                  (arg1 js-class))

#+nil
(cffi:defcfun ("_ZN7JSClassC1ERKS_" js-class-constructor) :void (this :pointer)
                                                                (arg1 js-class))

#+nil
(cl:defun js-class-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-class)))
    (js-class-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN7JSClassC1Ev" js-class-constructor) :void (this :pointer))

#+nil
(cl:defun js-class-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-class)))
    (js-class-constructor instance)
    instance))

(cffi:defcfun ("_ZN20JSAutoLocalRootScopeaSERKS_" js-auto-local-root-scope-operator-=) js-auto-local-root-scope (this :pointer)
                                                                                                                (arg1 js-auto-local-root-scope))

#+nil
(cffi:defcfun ("_ZN20JSAutoLocalRootScopeC1ERKS_" js-auto-local-root-scope-constructor) :void (this :pointer)
                                                                                              (arg1 js-auto-local-root-scope))

#+nil
(cl:defun js-auto-local-root-scope-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-auto-local-root-scope)))
    (js-auto-local-root-scope-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN20JSAutoLocalRootScopeC1EP9JSContext" js-auto-local-root-scope-constructor) :void (this :pointer)
                                                                                                     (cx :pointer))

#+nil
(cl:defun js-auto-local-root-scope-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-auto-local-root-scope)))
    (js-auto-local-root-scope-constructor instance)
    instance))

(cffi:defcfun ("_ZN20JSAutoLocalRootScope6forgetEPv" forget) :void (this :pointer)
                                                                   (thing (:pointer :void)))

(cffi:defcfun ("_ZN17JSLocaleCallbacksaSERKS_" js-locale-callbacks-operator-=) js-locale-callbacks (this :pointer)
                                                                                                   (arg1 js-locale-callbacks))

#+nil
(cffi:defcfun ("_ZN17JSLocaleCallbacksC1ERKS_" js-locale-callbacks-constructor) :void (this :pointer)
                                                                                      (arg1 js-locale-callbacks))

#+nil
(cl:defun js-locale-callbacks-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-locale-callbacks)))
    (js-locale-callbacks-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN17JSLocaleCallbacksC1Ev" js-locale-callbacks-constructor) :void (this :pointer))

#+nil
(cl:defun js-locale-callbacks-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-locale-callbacks)))
    (js-locale-callbacks-constructor instance)
    instance))

(cffi:defcfun ("_ZN15JSExtendedClassaSERKS_" js-extended-class-operator-=) js-extended-class (this :pointer)
                                                                                             (arg1 js-extended-class))

#+nil
(cffi:defcfun ("_ZN15JSExtendedClassC1ERKS_" js-extended-class-constructor) :void (this :pointer)
                                                                                  (arg1 js-extended-class))

#+nil
(cl:defun js-extended-class-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-extended-class)))
    (js-extended-class-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN15JSExtendedClassC1Ev" js-extended-class-constructor) :void (this :pointer))

#+nil
(cl:defun js-extended-class-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-extended-class)))
    (js-extended-class-constructor instance)
    instance))

(cffi:defcfun ("_ZN10JSPropertyaSERKS_" js-property-operator-=) js-property (this :pointer)
                                                                            (arg1 js-property))

#+nil
(cffi:defcfun ("_ZN10JSPropertyC1ERKS_" js-property-constructor) :void (this :pointer)
                                                                       (arg1 js-property))

#+nil
(cl:defun js-property-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-property)))
    (js-property-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN10JSPropertyC1Ev" js-property-constructor) :void (this :pointer))

#+nil
(cl:defun js-property-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-property)))
    (js-property-constructor instance)
    instance))

(cffi:defcfun ("_ZN12JSPrincipalsaSERKS_" js-principals-operator-=) js-principals (this :pointer)
                                                                                  (arg1 js-principals))

#+nil
(cffi:defcfun ("_ZN12JSPrincipalsC1ERKS_" js-principals-constructor) :void (this :pointer)
                                                                           (arg1 js-principals))

#+nil
(cl:defun js-principals-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-principals)))
    (js-principals-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN12JSPrincipalsC1Ev" js-principals-constructor) :void (this :pointer))

#+nil
(cl:defun js-principals-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-principals)))
    (js-principals-constructor instance)
    instance))

(cffi:defcfun ("_ZN14JSFunctionSpecaSERKS_" js-function-spec-operator-=) js-function-spec (this :pointer)
                                                                                          (arg1 js-function-spec))

#+nil
(cffi:defcfun ("_ZN14JSFunctionSpecC1ERKS_" js-function-spec-constructor) :void (this :pointer)
                                                                                (arg1 js-function-spec))

#+nil
(cl:defun js-function-spec-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-function-spec)))
    (js-function-spec-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN14JSFunctionSpecC1Ev" js-function-spec-constructor) :void (this :pointer))

#+nil
(cl:defun js-function-spec-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-function-spec)))
    (js-function-spec-constructor instance)
    instance))

(cffi:defcfun ("_ZN13JSErrorReportaSERKS_" js-error-report-operator-=) js-error-report (this :pointer)
                                                                                       (arg1 js-error-report))

#+nil
(cffi:defcfun ("_ZN13JSErrorReportC1ERKS_" js-error-report-constructor) :void (this :pointer)
                                                                              (arg1 js-error-report))

#+nil
(cl:defun js-error-report-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-error-report)))
    (js-error-report-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN13JSErrorReportC1Ev" js-error-report-constructor) :void (this :pointer))

#+nil
(cl:defun js-error-report-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-error-report)))
    (js-error-report-constructor instance)
    instance))

(cffi:defcfun ("_ZN11JSObjectOpsaSERKS_" js-object-ops-operator-=) js-object-ops (this :pointer)
                                                                                 (arg1 js-object-ops))

#+nil
(cffi:defcfun ("_ZN11JSObjectOpsC1ERKS_" js-object-ops-constructor) :void (this :pointer)
                                                                          (arg1 js-object-ops))

#+nil
(cl:defun js-object-ops-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-object-ops)))
    (js-object-ops-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN11JSObjectOpsC1Ev" js-object-ops-constructor) :void (this :pointer))

#+nil
(cl:defun js-object-ops-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-object-ops)))
    (js-object-ops-constructor instance)
    instance))

(cffi:defcfun ("_ZN9JSIdArrayaSERKS_" js-id-array-operator-=) js-id-array (this :pointer)
                                                                          (arg1 js-id-array))

#+nil
(cffi:defcfun ("_ZN9JSIdArrayC1ERKS_" js-id-array-constructor) :void (this :pointer)
                                                                     (arg1 js-id-array))

#+nil
(cl:defun js-id-array-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-id-array)))
    (js-id-array-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN9JSIdArrayC1Ev" js-id-array-constructor) :void (this :pointer))

#+nil
(cl:defun js-id-array-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-id-array)))
    (js-id-array-constructor instance)
    instance))

(cffi:defcfun ("_ZN14JSXMLObjectOpsaSERKS_" jsxml-object-ops-operator-=) jsxml-object-ops (this :pointer)
                                                                                          (arg1 jsxml-object-ops))

#+nil
(cffi:defcfun ("_ZN14JSXMLObjectOpsC1ERKS_" jsxml-object-ops-constructor) :void (this :pointer)
                                                                                (arg1 jsxml-object-ops))

#+nil
(cl:defun jsxml-object-ops-new ()
  (cl:let ((instance (cffi:foreign-alloc 'jsxml-object-ops)))
    (jsxml-object-ops-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN14JSXMLObjectOpsC1Ev" jsxml-object-ops-constructor) :void (this :pointer))

#+nil
(cl:defun jsxml-object-ops-new ()
  (cl:let ((instance (cffi:foreign-alloc 'jsxml-object-ops)))
    (jsxml-object-ops-constructor instance)
    instance))

(cffi:defcfun ("_ZN17JSConstDoubleSpecaSERKS_" js-const-double-spec-operator-=) js-const-double-spec (this :pointer)
                                                                                                     (arg1 js-const-double-spec))

#+nil
(cffi:defcfun ("_ZN17JSConstDoubleSpecC1ERKS_" js-const-double-spec-constructor) :void (this :pointer)
                                                                                       (arg1 js-const-double-spec))

#+nil
(cl:defun js-const-double-spec-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-const-double-spec)))
    (js-const-double-spec-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN17JSConstDoubleSpecC1Ev" js-const-double-spec-constructor) :void (this :pointer))

#+nil
(cl:defun js-const-double-spec-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-const-double-spec)))
    (js-const-double-spec-constructor instance)
    instance))

(cffi:defcfun ("_ZN8JSTraceraSERKS_" js-tracer-operator-=) js-tracer (this :pointer)
                                                                     (arg1 js-tracer))

#+nil
(cffi:defcfun ("_ZN8JSTracerC1ERKS_" js-tracer-constructor) :void (this :pointer)
                                                                  (arg1 js-tracer))

#+nil
(cl:defun js-tracer-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-tracer)))
    (js-tracer-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN8JSTracerC1Ev" js-tracer-constructor) :void (this :pointer))

#+nil
(cl:defun js-tracer-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-tracer)))
    (js-tracer-constructor instance)
    instance))

(cffi:defcfun ("_ZN14JSPropertySpecaSERKS_" js-property-spec-operator-=) js-property-spec (this :pointer)
                                                                                          (arg1 js-property-spec))

#+nil
(cffi:defcfun ("_ZN14JSPropertySpecC1ERKS_" js-property-spec-constructor) :void (this :pointer)
                                                                                (arg1 js-property-spec))

#+nil
(cl:defun js-property-spec-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-property-spec)))
    (js-property-spec-constructor instance)
    instance))

#+nil
(cffi:defcfun ("_ZN14JSPropertySpecC1Ev" js-property-spec-constructor) :void (this :pointer))

#+nil
(cl:defun js-property-spec-new ()
  (cl:let ((instance (cffi:foreign-alloc 'js-property-spec)))
    (js-property-spec-constructor instance)
    instance))
